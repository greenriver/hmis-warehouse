= render partial: 'breadcrumbs'
%h1
  = _("Import Log from #{@import.data_source.name}")
.row
  .col-sm-12
    .table-responsive
      %table.table.table-sm
        %tbody
          %tr
            %th Type
            %td= @import.type
          %tr
            %th Imported On
            %td= @import.created_at
          %tr
            %th Completed In
            %td= @import.import_time(details: true)
          %tr
            %th Files Found
            %td
              = link_to_if @import&.upload&.content.present?, "#{@import.files.try(:count)} in #{@import.upload.file.to_s.split('/').last}", download_import_path(@import)
          - if @import.summary.present?
            %tr
              %th Import Summary
              %td
                %table.table.table-sm.import__summary.table-hover
                  %thead
                    %tr
                      %th File
                      %th Total Rows
                      %th Added
                      %th Updated
                      %th Restored (Deleted)
                      %th Errors
                  %tbody
                    - @import.summary.with_indifferent_access.sort_by{|f,_| f}.each do |k,v|
                      - filename = k.split('/')[-1]
                      %tr
                        %td= filename
                        %td= number_with_delimiter(v['total_lines'])
                        %td= number_with_delimiter(v['lines_added'])
                        %td= number_with_delimiter(v['lines_updated'])
                        %td= number_with_delimiter(v.try(:[], 'lines_restored') || 0)
                        %td
                          - if @import.import_errors.is_a?(Hash) && @import.import_errors[filename].is_a?(Array)
                            = render 'error_modal', modal_slug: filename.downcase.gsub('.', ''), errors: @import.import_errors.with_indifferent_access[filename], total_errors: v['total_errors']
                          - else
                            = number_with_delimiter(v['total_errors'])

- if @import.import_errors.present? && @import.import_errors.is_a?(Array)
  .row
    .col-sm-12
      %h3 Import Errors
      - @import.import_errors.each do |e|
        = render 'error_list', error: e
