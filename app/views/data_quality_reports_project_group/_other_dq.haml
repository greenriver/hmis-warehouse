- if @report.report.with_indifferent_access[:incorrect_dob].present?
  - incorrect_counts = @report.report.with_indifferent_access[:incorrect_dob]
  - no_service_counts = @report.report.with_indifferent_access[:missing_nights]
  .row
    .col-sm-4
      %h3 Other Data Quality Measures
  .well.overflow-scroll
    %table.table.table-condensed
      %thead
        %tr
          %th Project Name
          %th Project Type
          %th.page-bg-color DOB on or before entry date
          %th Clients with no enrollment in the final month of range
      %tbody
        - @report.projects.each do |project|
          - p_type = ::HUD.project_type_brief(project.ProjectType)
          - p_class = "client__service_type_#{p_type}"
          %tr
            %td
              = project.ProjectName
            %td
              %span{class: "client__service_type_#{project.ProjectType}"}
                .enrollment__project_type{class: p_class}
                  %em.service-type__program-type= p_type
            %td.page-bg-color
              - measure = incorrect_counts[project.id.to_s]
              - key = "incorrect_dob_#{project.id}"
              - if measure > 0
                = link_to support_project_group_data_quality_report_path(@project_group, @report, {key: key}), data: {loads_in_pjax_modal: true} do
                  = measure
              - else
                = measure
            %td
              - measure = no_service_counts[project.id.to_s]
              - key = "missing_nights_#{project.id}"
              - if measure > 0
                = link_to support_project_group_data_quality_report_path(@project_group, @report, {key: key}), data: {loads_in_pjax_modal: true} do
                  = measure
              - else
                = measure