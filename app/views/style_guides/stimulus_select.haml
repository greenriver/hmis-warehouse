= render 'breadcrumbs'
- validate_html = { input_html: {class: 'validate'}}
- form_defaults = { required: false }
- collection = {'Choice 1 (ES)' => 'One', 'Choice 2 (SO)' => 'Two', 'Choice 3 (TH)' => 'Three',  'Choice 4 (RRH)' => 'Four', 'Choice 5' => 'Five'}
- huge_collection = (0..20_000).map{|i| [number_to_human(i), i]}
.container.py-4
  %h1 Stimulus Select
  - if params[:mock_2]
    = debug params[:mock_2]
  %section
    = simple_form_for @form, as: :mock_2, defaults: form_defaults, method: :get, url: '#' do |f|
      - klass = if request.xhr? then 'col-12' else 'col-6' end
      .row
        %div{class: klass}
          %h4 Select Tag (single)
          - options = options_from_collection_for_select(GrdaWarehouse::DataSource.options_for_select(user: current_user).each, :last, :first, params[:data_source_id])
          = render 'inputs/select', field_name: :select_tag_1, label: 'Data Source', options: options, html_options: { include_blank: 'All Data Sources' }

          %h4 Select Tag (multiple)
          - options = options_from_collection_for_select(GrdaWarehouse::DataSource.options_for_select(user: current_user).each, :last, :first, params[:data_source_id])
          = render 'inputs/select', field_name: :select_tag_2, label: 'Data Source', options: options, html_options: { include_blank: 'All Data Sources',  multiple: true }


          %h4 Select 2 - Default
          = f.input :stimulus_select, collection: collection, as: :select_two

          %h4 Select 2 - Multiselect (with select all/none)
          = f.input :stimulus_select_multi, collection: collection,  as: :select_two, input_html: { multiple: true }

          %h4 Select 2 - simple form input - CoC special behavior
          %p.font-italic Select inputs have class name: <strong>.select2-id-when-selected</strong>
          = f.input :select2_coc_behavior_simple_form, collection: collection, as: :select_two, input_html: { class: ['select2-id-when-selected'] }, hint: 'Show value instead of label when selected'

          %h4 Select 2 - simple form input - Parenthetical
          %p.font-italic Select inputs have class name: <strong>.select2-parenthetical-when-selected</strong>
          = f.input :select2_parenthetical_simple_form, collection: collection, as: :select_two, input_html: { class: ['select2-parenthetical-when-selected'] }, hint: 'Show only parenthetical details when selected'

          %h4 Select 2 - Ajax load of Options for Projects with Blank (warehouse)
          = f.input :huge_collection_options_with_blank, collection: [], as: :select_two, input_html: { data: { 'collection-path' => api_projects_path() }, placeholder: 'Please choose'}, label: 'Projects', include_blank: 'Please choose'

          - selected = GrdaWarehouse::Hud::Project.joins(:data_source, :organization).with_project_type([1]).viewable_by(current_user).last.id
          %h4 Select 2 - Ajax load of Options for Projects #{selected} pre-selected (warehouse)
          = f.input :huge_collection_options, collection: [], as: :select_two, input_html: { data: { 'collection-path' => api_projects_path(selected_project_ids: [selected]) }, placeholder: 'Any Project'}, label: 'Projects'

          %h4 Select 2 - Ajax load of Options for Projects Multiple without pre-selected projects (warehouse)
          = f.input :huge_collection_options_multi_none, collection: [], as: :select_two, input_html: { data: { 'collection-path' => api_projects_path(), placeholder: 'Any Project'}, multiple: true}, label: 'Projects'

          %h4 Select 2 - Ajax load of Options for Projects Multiple with pre-selected projects (warehouse)
          = f.input :huge_collection_options_multi, collection: [], as: :select_two, input_html: { data: { 'collection-path' => api_projects_path(selected_project_ids: GrdaWarehouse::Hud::Project.pluck(:id).sample(2)) }, multiple: true, placeholder: 'Any Project'}, label: 'Projects'

          %h4 Dependent Ajax Loaded Select
          = f.input :project_type_codes, collection: GrdaWarehouse::Hud::Project::HOMELESS_TYPE_TITLES.invert, as: :select_two, input_html: { multiple: true, data: { 'stimulus-select-target' => 'projectTypes', action: 'change->stimulus-select#updateDependentProjectList' }}
          = f.input :organization_ids, collection: GrdaWarehouse::Hud::Organization.options_for_select(user: current_user), as: :grouped_select_two, group_method: :last, input_html: { multiple: true, data: { 'stimulus-select-target' => 'organizations', action: 'change->stimulus-select#updateDependentProjectList' }, placeholder: 'Any Organization'}, label: 'Organizations', required: false
          = f.input :project_ids, collection: GrdaWarehouse::Hud::Project.options_for_select(user: current_user), as: :grouped_select_two, group_method: :last, input_html: { multiple: true, data: {'stimulus-select-target' => 'projects', project_url: api_projects_path() }, placeholder: 'Any Project'}, label: 'Projects', required: false

          = f.submit 'Update'
