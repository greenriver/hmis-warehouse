- radio_wrapper_class = if f.options[:wrapper] == :readonly then :readonly else :vertical_collection end
.row
  .col-md-8
    .c-card.mb-4
      .c-card__header.c-card__header--external
        %h3 Investigation Information
      .c-card__content
        = f.input :client_id, as: :hidden
        = f.input :investigator, label: @case.label_for(:investigator)
        = f.input :date_listed, as: :date_picker
        = f.input :alert_in_epic, as: :boolean_button_group, collection: @case.alert_options, label: @case.label_for(:alert_in_epic)
        = f.input :complete, as: :boolean_button_group, collection: @case.yes_no_options, label: @case.label_for(:complete)
    .c-card.mb-4
      .c-card__header.c-card__header--external
        %h3 Period of Interest
      .c-card__content
        = f.input :date_interviewed, as: :date_picker
        = f.input :infectious_start_date, as: :date_picker, hint: 'Day 1 Infectious Period = Date of Sx start minus 2 days', input_html: {class: 'jInfectiousStartDate'}
        = f.input :day_two, as: :date_picker, label: @case.label_for(:day_two), input_html: {class: 'jDayTwo'}
        = f.input :symptoms, as: :check_boxes, collection: @case.symptom_options, wrapper: radio_wrapper_class
        = f.input :other_symptoms, label: @case.label_for(:other_symptoms)
        = f.input :testing_date, as: :date_picker
        = f.input :isolation_start_date, as: :date_picker
    .c-card.mb-4
      .c-card__header.c-card__header--external
        %h3 Index Case
      .c-card__content
        = f.input :first_name
        = f.input :last_name
        = f.input :phone
        = f.input :aliases
        = f.input :dob, as: :date_picker
        = f.input :gender, as: :radio_buttons, collection: {'Unknown' => ''}.merge(HudUtility2024.genders.invert), wrapper: radio_wrapper_class
        = f.input :race, as: :check_boxes, collection: HudUtility2024.races.invert.except('none'), wrapper: radio_wrapper_class
        = f.input :preferred_language
        .jLocations
          = render 'health/he/locations/table', readonly: f.options[:wrapper] == :readonly
        = f.input :occupation, label: @case.label_for(:occupation)
        = f.input :recent_incarceration
        = f.input :vaccinated, as: :boolean_button_group, collection: @case.yes_no_unknown_options, include_blank: true, label: @case.label_for(:vaccinated)
        = f.input :vaccine, as: :check_boxes, collection: Health::Vaccination.vaccination_type_options, input_html: { multiple: true }, label: @case.label_for(:vaccine), wrapper: radio_wrapper_class
        - if f.options[:wrapper] == :readonly
          %label.readonly-label= @case.label_for(:vaccination_dates)
          .controls.readonly-input
            %label.d-block.readonly-value
              = @case.vaccination_dates&.join(', ')
        - else
          - @case.vaccination_date_count.times do |i|
            = f.input :vaccination_dates, label: @case.label_for(:vaccination_dates), as: :date_picker, input_html: {name: "health_tracing_case[vaccination_dates][]", id: "health_tracing_case[vaccination_dates][]", value: @case.vaccination_dates.try(:[], i)}
        = f.input :vaccination_complete, as: :boolean_button_group, collection: @case.yes_no_unknown_options, include_blank: true, label: @case.label_for(:vaccination_complete)
        = f.input :notes, as: :text

= render 'health/he/period_of_interest_js'
