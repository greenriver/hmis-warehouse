- radio_wrapper_class = if f.options[:wrapper] == :readonly then :readonly else :vertical_collection end
.row
  .col-md-8
    .c-card.mb-4
      .c-card__header.c-card__header--external
        %h3 Investigation Information
      .c-card__content
        = f.input :investigator, label: @contact.label_for(:investigator)
        = f.input :date_interviewed, as: :date_picker
        = f.input :alert_in_epic, as: :boolean_button_group, collection: @contact.alert_options, label: @contact.label_for(:alert_in_epic)
.row
  .col-md-8
    .c-card.mb-4
      .c-card__header.c-card__header--external
        %h3 Contact Information
      .c-card__content
        = f.input :first_name
        = f.input :last_name
        = f.input :aliases
        = f.input :phone_number
        = f.input :address, label: @contact.label_for(:address)
        = f.input :notified, as: :boolean_button_group, collection: @contact.yes_no_options, include_blank: true, label: @contact.label_for(:notified)
        = f.input :dob, as: :date_picker
        = f.input :estimated_age, hint: 'Estimated age if reported by index case'
        = f.input :gender, as: :radio_buttons, collection: {'Unknown' => ''}.merge(HudUtility2024.genders.invert), wrapper: radio_wrapper_class
        = f.input :race, as: :check_boxes, collection: HudUtility.races.invert.except('none'), wrapper: radio_wrapper_class
        = f.input :ethnicity, as: :radio_buttons, collection: {'Unknown' => ''}.merge(HudUtility.ethnicities.invert), wrapper: radio_wrapper_class
        = f.input :preferred_language
        = f.input :relationship_to_index_case
        = f.input :location_of_exposure
        = f.input :nature_of_exposure, hint: 'Frequency, duration, timing'
        = f.input :location_of_contact, label: @contact.label_for(:location_of_contact)
        = f.input :sleeping_location
        = f.input :symptomatic, as: :boolean_button_group, collection: @contact.symptomatic_options, include_blank: true, label: @contact.label_for(:symptomatic)
        = f.input :symptoms, as: :check_boxes, collection: @contact.symptom_options, wrapper: radio_wrapper_class
        = f.input :other_symptoms, label: @contact.label_for(:other_symptoms)
        = f.input :symptom_onset_date, as: :date_picker
        = f.input :referred_for_testing, as: :boolean_button_group, collection: @contact.referred_options, include_blank: true, label: @contact.label_for(:referred_for_testing)
        .jResults
          = render 'health/he/results/table', readonly: f.options[:wrapper] == :readonly
        = f.input :vaccinated, as: :boolean_button_group, collection: @contact.yes_no_unknown_options, include_blank: true, label: @contact.label_for(:vaccinated)
        = f.input :vaccine, as: :check_boxes, collection: Health::Vaccination.vaccination_type_options, input_html: { multiple: true }, label: @contact.label_for(:vaccine), wrapper: radio_wrapper_class
        - if f.options[:wrapper] == :readonly
          %label.readonly-label= @contact.label_for(:vaccination_dates)
          .controls.readonly-input
            %label.d-block.readonly-value
              = @contact.vaccination_dates&.join(', ')
        - else
          - @contact.vaccination_date_count.times do |i|
            = f.input :vaccination_dates, label: @contact.label_for(:vaccination_dates), as: :date_picker, input_html: {name: "health_tracing_contact[vaccination_dates][]", id: "health_tracing_contact[vaccination_dates][]", value: @contact.vaccination_dates.try(:[], i)}
        = f.input :vaccination_complete, as: :boolean_button_group, collection: @contact.yes_no_unknown_options, include_blank: true, label: @contact.label_for(:vaccination_complete)
        = f.input :notes, as: :text
