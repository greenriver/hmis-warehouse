- if @active_filter
  - filter_class = 'client__filter-active'
- else
  - filter_class = 'client__filter'

.dropdown.o-filtration{class: filter_class}
  %button.btn.btn-secondary.dropdown-toggle{data: {toggle: 'dropdown'}}
    Filter
    %span.caret

  .o-filtration__container.dropdown-menu.dropdown-menu-left.options
    .o-filtration__header
      %h3.client__filter-header Patient Filter

    = form_tag(nil, method: "get") do
      -# preserve search for filtering
      = hidden_field_tag 'entity_id', params[:entity_id]
      - if params[:q] && params[:q][:full_text_search]
        = hidden_field_tag 'q[full_text_search]', params[:q][:full_text_search]

      .row
        .col-sm-6
          .o-filtration__option
            %label Status
            .radio
              - active = params[:filter].blank? || params[:filter][:population] == 'all'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :all, autocomplete: :off, checked: active}
                All
            .radio
              - active = params[:filter].present? && params[:filter][:population] == 'not_engaged'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :not_engaged, autocomplete: :off, checked: active}
                Not engaged
            .radio
              - active = params[:filter].present? && params[:filter][:population] == 'needs_f2f'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :needs_f2f, autocomplete: :off, checked: active}
                  F2F Visit Needed this Month
            .radio
              - active = params[:filter].present? && params[:filter][:population] == 'needs_qa'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :needs_qa, autocomplete: :off, checked: active}
                Valid QA Needed This Month
            .radio
              - active = params[:filter].present? && params[:filter][:population] == 'needs_intake'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :needs_intake, autocomplete: :off, checked: active}
                Initial Intake Due Within 30 Days
            .radio
              - active = params[:filter].present? && params[:filter][:population] == 'needs_renewal'
              %label{class: "#{active ? :active : ''}"}
                %input{type: :radio, name: 'filter[population]', value: :needs_renewal, autocomplete: :off, checked: active}
                  Annual Renewal Due Within 30 Days or Overdue
        .col-sm-6
          .o-filtration__option
            %label Needs
            .checkbox
              - active = params.dig(:filter, :ncm_review).present?
              %label{class: "#{active ? :active : ''}"}
                %input{type: :checkbox, name: 'filter[ncm_review]', value: :ncm_review, autocomplete: :off, checked: active}
                NCM Review
              - active = params.dig(:filter, :manager_review).present?
              %label{class: "#{active ? :active : ''}"}
                %input{type: :checkbox, name: 'filter[manager_review]', value: :manager_review, autocomplete: :off, checked: active}
                Clinical Manager Review
              - active = params.dig(:filter, :sent_to_pcp).present?
              %label{class: "#{active ? :active : ''}"}
                %input{type: :checkbox, name: 'filter[sent_to_pcp]', value: :sent_to_pcp, autocomplete: :off, checked: active}
                To be sent to PCP

      .o-filtration__option.row
        .col-sm-12
          - unassigned_selector = OpenStruct.new(name: 'Only Unassigned', id: 'unassigned')
          - selection_candidates = [unassigned_selector, current_user] + User.care_coordinators.to_a
          - options = options_from_collection_for_select(selection_candidates.uniq, :id, :name, params.dig(:filter, :user))
          = render 'inputs/select', field_name: 'filter[user]', label: 'Care Coordinator', options: options, html_options: { include_blank: 'All', style: 'width: 100%;' }

          - selection_candidates = [unassigned_selector, current_user] + User.nurse_care_managers.to_a
          - options = options_from_collection_for_select(selection_candidates.uniq, :id, :name, params.dig(:filter, :nurse_care_manager_id))
          = render 'inputs/select', field_name: 'filter[nurse_care_manager_id]', label: 'Nurse Care Manager', options: options, html_options: { include_blank: 'All', style: 'width: 100%;' }

      .o-filtration__actions.form__actions
        = link_to nil, class: 'btn btn-secondary' do
          %span.icon-cross.icon-inline
          Clear Filters
        %button.btn.btn-primary.ml-auto{type: :submit}
          %span.icon-filter.icon-inline.mr-1
          Filter

= content_for :page_js do
  :javascript
    $('.dropdown-toggle').click(function(event){
      $(event.currentTarget).blur()
    })
