%tr
  %td
    .project__name.mb-2{id: "project-#{project.id}"}
      .d-flex
        .enrollment__project_type{class: "client__service_type_#{project.ProjectType}"}
          .service-type__program-type{data: {toggle: :tooltip, title: HUD.project_type(project.ProjectType)}}
            = HUD.project_type_brief project.ProjectType
        .ml-2.mb-2.mr-2
          = link_to_if can_view_projects?, project.name, project_path(project)
        - if can_edit_projects?
          .ml-auto
          = link_to edit_project_path(project), class: ['btn', 'btn-sm', 'btn-secondary', 'btn-icon-only'] do
            %i.icon-pencil
      - if project.act_as_project_type.present? && project.act_as_project_type != project.ProjectType
        .o-text--italic.mb-2
          Acts as
          = HUD.project_type project.act_as_project_type
    .project__tracking-method.mb-2
      %em.small
        Tracking Method:
        = HUD.tracking_method project.TrackingMethod
    - if can_see_raw_hmis_data?
      = link_to 'HMIS', hmi_path(project.id, type: 'Project'), class: 'btn btn-xs btn-secondary btn-muted btn-hmis'

  %td.text-center
    %span{data: {toggle: :tooltip, title: project.confidential_hint}}
      = checkmark project.confidential

  %td
    .d-flex
      .mb-2.mr-2
        = project.project_cocs.map(&:CoCCode).join(', ')
      - if can_edit_projects? && project.project_cocs.any?
        .ml-auto
          = link_to edit_project_coc_path(project.project_cocs&.first), class: ['btn', 'btn-sm', 'btn-secondary', 'btn-icon-only'] do
            %i.icon-pencil
    - if project.project_cocs.map(&:hud_coc_code).map(&:presence).any?
      .o-text--italic.mb-2
        Overridden as
        = project.project_cocs.map(&:hud_coc_code).join(', ')

  %td
    .mb-2
      = checkmark_or_x(project.ContinuumProject == 1)
    - if ! project.hud_continuum_funded.nil?
      .o-text--italic.mb-2
        Overridden
        = checkmark_or_x(project.hud_continuum_funded)
  %td
    .mb-2
      = HUD.housing_type(project.HousingType).presence || 'None'
    - if project.housing_type_override.present?
      .o-text--italic.mb-2
        Overridden as
        = HUD.housing_type project.housing_type_override
  %td
    .d-flex
      .mb-2.mr-2
        = project.geographies&.map(&:Geocode)&.join('; ').presence || 'None'
      - if can_edit_projects? && project.geographies.any?
        .ml-auto
          = link_to edit_geography_path(project.geographies&.first), class: ['btn', 'btn-sm', 'btn-secondary', 'btn-icon-only'] do
            %i.icon-pencil
    - if project.geographies&.map(&:geocode_override).compact.present?
      .o-text--italic.mb-2
        Overridden as
        = project.geographies.map(&:geocode_override).join(', ')

  %td
    .mb-2
      = project.geographies&.map{|m| HUD.geography_type(m.GeographyType)}&.join('; ').presence || 'None'
    - if project.geographies&.map(&:geography_type_override).compact.present?
      .o-text--italic.mb-2
        Overridden as
        = project.geographies.map{|m| HUD.geography_type m.geography_type_override}.join(', ')
  %td
    = checkmark_or_x(project.inventories.present? )