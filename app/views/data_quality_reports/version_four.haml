- content_for :title, "Project Data Quality Report for #{@report.title(current_user)}"
- grouped_as = @report.report_type
%h1= content_for :title
- if @report.processing_errors.present?
  %p.alert.alert-danger.text-center
    Processing error:
    = JSON.parse(@report.processing_errors).first
- elsif @report.completed_at.blank?
  %p.alert.alert-info.text-center
    The report is currently running...
- else
  %h3 Report Parameters
  .well.overflow-scroll
    .row
      .col-sm-4
        %h4 Reporting Period
        %p
          %strong= @report.start
          to
          %strong= @report.end
      .col-sm-4
        %h4 Projects
        - names = @report.projects.map do |project|
          - project.organization_and_name(current_user)
        %p= names.join('<br />').html_safe
      .col-sm-4
        %h4 Run
        - requestor = User.find(@report.requestor_id)
        %p
          Run on #{@report.created_at.to_date}
          - if @report.requestor.present?
            by #{@report.requestor&.name}

  %h3 Project Descriptors
  = render "data_quality_reports/version_four/#{grouped_as}/project_descriptor_completeness"
  %h3 Overview
  = render "data_quality_reports/version_four/#{grouped_as}/overview", support_path: @support_path
  %h3 Data Quality Summary
  = render "data_quality_reports/version_four/#{grouped_as}/summary", support_path: @support_path
  - if ! @report.hide_beds_and_units
    %h3 Bed Utilization
    = render "data_quality_reports/version_four/#{grouped_as}/bed_utilization_description", support_path: @support_path
    = render "data_quality_reports/version_four/#{grouped_as}/bed_utilization", support_path: @support_path
    %h3 Unit Utilization
    = render "data_quality_reports/version_four/#{grouped_as}/unit_utilization_description", support_path: @support_path
    = render "data_quality_reports/version_four/#{grouped_as}/unit_utilization", support_path: @support_path
  %h3 Completeness
  = render "data_quality_reports/version_four/#{grouped_as}/completeness", support_path: @support_path

  %h3 Timelineness
  = render "data_quality_reports/version_four/#{grouped_as}/timeliness", support_path: @support_path

  %h3 Outcomes
  = render "data_quality_reports/version_four/#{grouped_as}/outcomes", support_path: @support_path

  = render "data_quality_reports/version_four/#{grouped_as}/computation_description"

  = content_for :page_js do
    :javascript
      (function($) {
        console.log(#{@report.average_time_to_enter(current_user).to_json.html_safe})

        var time_to_enter = new App.DataQualityReports.TimeToEnter(#{@report.average_time_to_enter(current_user).to_json.html_safe}, '.time-to-enter-chart', '#{polymorphic_path(@support_path, @report_keys.merge({method: "average_time_to_enter"}))}');
        time_to_enter.build_chart();

        var time_to_exit = new App.DataQualityReports.TimeToExit(#{@report.average_time_to_exit(current_user).to_json.html_safe}, '.time-to-exit-chart', '#{polymorphic_path(@support_path, @report_keys.merge({method: "average_time_to_exit"}))}');
        time_to_exit.build_chart();

        var time_in_program = new App.DataQualityReports.TimeInProgram(#{@report.enrolled_length_of_stay(current_user).to_json.html_safe}, '.time-in-program-chart',
            '#{polymorphic_path(@support_path, @report_keys.merge({method: "enrolled_length_of_stay"}))}');
            time_in_program.build_chart();

        var income = new App.DataQualityReports.Income(#{@report.retained_income.to_json.html_safe}, '.income-chart',
          '#{polymorphic_path(@support_path, @report_keys.merge({method: "retained_income"}))}');
          income.build_chart();

        var no_income = new App.DataQualityReports.NoIncome(#{@report.no_income.to_json.html_safe}, '.no-income-chart',
          '#{polymorphic_path(@support_path, @report_keys.merge({method: "no_income"}))}');
          no_income.build_chart();

        var ph_destination = new App.DataQualityReports.PHDestination(#{@report.ph_destinations(current_user).to_json.html_safe}, '.ph-destination-chart',
            '#{polymorphic_path(@support_path, @report_keys.merge({method: "ph_destinations"}))}');
            ph_destination.build_chart();
      })(jQuery);
    - if grouped_as == :project_group
      :javascript
        (function($) {
          // Project group completeness
          var completeness_project_group = new App.DataQualityReports.Completeness(
            #{@report.project_group_completeness.to_json.html_safe},
            '.completeness-chart-project-group',
            '#{polymorphic_path(@support_path, @report_keys)}'
            );
          completeness_project_group.build_chart();
        })(jQuery);
    - if ! @report.hide_beds_and_units
      :javascript
        (function($) {
          var bed_census = new App.DataQualityReports.BedCensus(#{@report.bed_census_data.to_json.html_safe}, '.bed-census-chart',
          '#{polymorphic_path(@support_path, @report_keys.merge({method: "bed_utilization"}))}');
          bed_census.build_chart();
          var unit_census = new App.DataQualityReports.UnitCensus(#{@report.unit_census_data.to_json.html_safe}, '.unit-census-chart',
          '#{polymorphic_path(@support_path, @report_keys.merge({method: "unit_utilization"}))}');
          unit_census.build_chart();
        })(jQuery);
    -# Use projects here, not report_projects
    - @report.projects.each_with_index do |project, index|
      :javascript
        (function($) {
          var completeness_#{index} = new App.DataQualityReports.Completeness(
            #{@report.project_completeness(hud_project: project).to_json.html_safe},
            '.completeness-chart-#{index}',
            '#{polymorphic_path(@support_path, @report_keys)}',
            #{project.id}
          );
          completeness_#{index}.build_chart();
          // Because these are hidden by default, they need to be re-drawn on show
          $('#completeness-info').on('shown.bs.collapse', function(e) {
            completeness_#{index}.chart.flush();
          });
        })(jQuery);
