- if @report&.report.try(:[], 'project_missing').present?
  - counts = @report.report.with_indifferent_access[:project_missing]
  .row
    .col-sm-4
      %h3 Missing Values
    .col-sm-8
      = render 'missing_values_description'
  .well
    .overflow-scroll
      %table.table.table-responsive.data-quality__table
        %thead
          %tr
            %th Project Name
            %th Project Type
            %th Open Enrollments
            %th Clients with service during the range
            %th
              Missing %
              %span.text-muted
                (count)
            %th
              Refused %
              %span.text-muted
                (count)
            %th
              Unknown %
              %span.text-muted
                (count)
            %th
              Missing/Unknown/Refused %
              %span.text-muted
                (count)
            %th Grade

        %tbody
          - @report.projects.each do |project|
            - any_clients = counts["#{project.id}"]['total_open_enrollments'] > 0 rescue true
            - p_type = ::HUD.project_type_brief(project.ProjectType)
            - p_class = "client__service_type_#{p_type}"
            - grade = GrdaWarehouse::Grades::Missing.grade_from_score(counts["#{project.id}"]['score'])
            %tr
              %td= project.ProjectName
              %td
                %span{class: "client__service_type_#{project.ProjectType}"}
                  .enrollment__project_type{class: p_class}
                    %em.service-type__program-type= p_type
              %td.text-center= counts["#{project.id}"]['total_open_enrollments']
              %td.text-center= counts["#{project.id}"]['clients_served_during_range']
              %td.text-center
                = counts["#{project.id}"]['total_missing_percentage']
                %span.text-muted
                  (#{counts["#{project.id}"]['total_missing']})
              %td.text-center
                = counts["#{project.id}"]['total_refused_percentage']
                %span.text-muted
                  (#{counts["#{project.id}"]['total_refused']})
              %td.text-center
                = counts["#{project.id}"]['total_unknown_percentage']
                %span.text-muted
                  (#{counts["#{project.id}"]['total_unknown']})
              %td.text-center
                = counts["#{project.id}"]['total_incorrect_percentage']
                %span.text-muted
                  (#{counts["#{project.id}"]['total_incorrect']})
              - if any_clients
                %td.text-center{style: "background-color: #{grade&.color}; color: white; font-weight: bold;"}= grade&.grade
              - else
                %td
          - if @report.projects.count > 1
            %tfoot
              %tr
                - totals = counts['totals'].with_indifferent_access
                - grade = GrdaWarehouse::Grades::Missing.grade_from_score(totals['score'])
                %th.text-right{colspan: 2} Totals
                %td.text-center= totals[:total_open_enrollments]
                %td.text-center= totals[:clients_served_during_range]
                %td.text-center
                  = totals['total_missing_percentage']
                  %span.text-muted
                    (#{totals['total_missing']})
                %td.text-center{style: "background-color: #{grade&.color}; color: white; font-weight: bold;"}= grade&.grade

    %h4 Missing Values Details
    .overflow-scroll
      %table.table.table-responsive.data-quality__table
        %thead
          %tr
            %th{colspan: 2}
            - @report.class.missing_refused_names.each_with_index do |(word, _), index|
              - title = "#{word.to_s.titleize.gsub('Dob', 'DOB').gsub('Ssn', 'SSN')}"
              - odd_class = if index % 2 != 1 then 'data-quality__odd-columns' else '' end
              %th.text-center.data-quality__group-header{colspan: 3, class: odd_class}= title

          %tr
            %th Project Name
            %th Project Type
            - @report.class.missing_refused_names.each_with_index do |(word, _), index|
              - title = "#{word.to_s.titleize.gsub('Dob', 'DOB').gsub('Ssn', 'SSN')}"
              - odd_class = if index % 2 != 1 then 'data-quality__odd-columns' else '' end
              %th.text-center{class: odd_class} Missing
              %th.text-center{class: odd_class} Refused
              %th.text-center{class: odd_class} Doesn't Know
        %tbody
          - @report.projects.each do |project|
            - any_clients = counts["#{project.id}"]['total_open_enrollments'] > 0 rescue true
            - p_type = ::HUD.project_type_brief(project.ProjectType)
            - p_class = "client__service_type_#{p_type}"
            - grade = GrdaWarehouse::Grades::Missing.grade_from_score(counts["#{project.id}"]['score'])
            %tr
              %td.data-quality__middle= project.ProjectName
              %td.data-quality__middle
                %span{class: "client__service_type_#{project.ProjectType}"}
                  .enrollment__project_type{class: p_class}
                    %em.service-type__program-type= p_type
              - @report.class.missing_refused_names.each_with_index do |(word, _), index|
                - odd_class = if index % 2 != 1 then 'data-quality__odd-columns' else '' end
                - [:missing, :refused, :unknown].each do |type|
                  - if any_clients
                    - grade = GrdaWarehouse::Grades::Missing.grade_from_score(counts["#{project.id}"]["#{type}_#{word}_percentage"])
                    - key = "project_missing_#{project.id}_#{type}_#{word}"
                    - measure = counts["#{project.id}"]["#{type}_#{word}"]
                    %td.text-center{class: odd_class, style: "color: #{grade&.color};"}
                      #{counts["#{project.id}"]["#{type}_#{word}_percentage"].try(&:round)}%
                      .text-muted
                        - if measure > 0
                          = link_to polymorphic_path(support_path, {key: key}), data: {loads_in_pjax_modal: true} do
                            #{measure}
                        - else
                          #{measure}
                  - else
                    %td{class: odd_class}
          - if @report.projects.count > 1
            %tr
              - totals = counts['totals'].with_indifferent_access
              - grade = GrdaWarehouse::Grades::Missing.grade_from_score(totals['score'])
              %th.text-right{colspan: 2} Totals
              - @report.class.missing_refused_names.each_with_index do |(word, _), index|
                - odd_class = if index % 2 != 1 then 'data-quality__odd-columns' else '' end
                - [:missing, :refused, :unknown].each do |type|
                  - measure = totals["#{type}_#{word}"]
                  - key = "project_missing_totals_#{type}_#{word}"
                  - grade = GrdaWarehouse::Grades::Missing.grade_from_score(totals["#{type}_#{word}_percentage"])
                  %td.text-center{class: odd_class, style: "color: #{grade&.color};"}
                    #{totals["#{type}_#{word}_percentage"].try(&:round)}%
                    .text-muted
                      - if measure > 0
                        = link_to polymorphic_path(support_path, {key: key}), data: {loads_in_pjax_modal: true} do
                          #{measure}
                      - else
                        #{measure}

