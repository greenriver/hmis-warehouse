- unless ajax_modal_request?
  :ruby
    show_health_pilot = @client.show_health_pilot_for?(current_user) rescue false
    show_health_hpc = @client.show_health_hpc_for?(current_user) rescue false
    show_demographic = @client.show_demographics_to?(current_user) rescue false
    @note_count = 0
    show_notes = can_edit_window_client_notes_or_own_window_client_notes?
    if show_notes
      @note_count = @client.notes.visible_by(current_user, @client).count
    end
    always_visible = {
      client_path(@client) => {
        title: 'Dashboard', #'Basic Info & Programs'
        permission: show_demographic,
      },
      simple_client_path(@client) => {
        title: 'Demographics',
        permission: !show_demographic,
      },
    }
    hmis = {}
    hmis.merge!({
      polymorphic_path(['client_he', health_emergency], client_id: @client) => {
        title: 'Health Emergency',
        permission: can_view_or_search_clients?,
        item_class: 'health-emergency',
      },
    }) if health_emergency?
    hmis.merge!({
      enrollment_details_client_path(@client) => {
        title: 'Enrollment Details',
        permission: can_view_enrollment_details? && show_demographic,
      },
      client_history_path(@client) => {
        title: 'History',
        permission: show_demographic,
      },
    })
    hmis.merge!({
      financial_client_path(@client) => {
        title: 'Transactions',
        permission: can_access_some_version_of_clients? && @client.financial_clients.exists?,
      },
    }) if RailsDrivers.loaded.include?(:financial)
    hmis.merge!({
      map_client_location_history_client_path(@client) => {
        title: 'Locations',
        permission: show_demographic && can_view_client_locations?,
      },
    }) if RailsDrivers.loaded.include?(:client_location_history)
    hmis.merge!({
      polymorphic_path(client_chronic_path_generator, client_id: @client) => {
        title: 'Chronic',
        permission: can_view_chronic_tab? && show_demographic,
      },
      client_hud_lots_path(@client) => {
        title: 'HUD LOT',
        permission: show_demographic,
      },
      polymorphic_path(client_notes_path_generator, client_id: @client) => {
        title: 'Notes',
        permission: show_notes,
      },
      polymorphic_path(edit_cas_readiness_path_generator, client_id: @client) => {
        title: 'CAS Readiness',
        permission: can_edit_clients?  && show_demographic && GrdaWarehouse::Config.get(:cas_url).present?,
      },
      polymorphic_path(vispdats_path_generator, client_id: @client) => {
        title: 'VI-SPDAT',
        permission: GrdaWarehouse::Vispdat::Base.any_visible_by?(current_user),
      },
      client_coordinated_entry_assessments_path(client_id: @client) => {
        title: Translation.translate('Coordinated Entry Assessment'),
        permission: GrdaWarehouse::CoordinatedEntryAssessment::Base.any_visible_by?(current_user),
      },
      polymorphic_path(youth_intakes_path_generator, client_id: @client) => {
        title: 'Youth Intakes',
        permission: GrdaWarehouse::YouthIntake::Base.any_visible_by?(current_user),
      },
      client_releases_path(client_id: @client) => {
        title: Translation.translate('Releases of Information'),
        permission: can_use_separated_consent?,
      },
      polymorphic_path(files_path_generator, client_id: @client) => {
        title: 'Files',
        permission: can_manage_window_client_files? || can_see_own_file_uploads? || can_generate_homeless_verification_pdfs?,
      },
      polymorphic_path(users_path_generator, client_id: @client) => {
        title: 'Relationships',
        permission: can_assign_users_to_clients?,
      },
      edit_client_path(@client) => {
        title: 'Merge',
        permission: can_edit_clients? && show_demographic,
      },
      client_audits_path(@client) => {
        title: 'Audit',
        permission: can_audit_clients?,
      },
    })
    hmis.merge!({
      service_scanning_scanner_id_path(@client) => {
        title: 'Scan Card IDs',
        permission: can_use_service_register?,
      },
    }) if RailsDrivers.loaded.include?(:service_scanning) && GrdaWarehouse::Config.get(:service_register_visible)
    health = {
      # BH CP Pages
      polymorphic_path(health_path_generator + [:patient, :index], client_id: @client) => {
       title: 'Health Dashboard',
       permission: show_health_hpc,
      },
      polymorphic_path(careplans_path_generator, client_id: @client) => {
       title: 'Care Plan',
       permission: show_health_hpc,
      },
      polymorphic_path(team_members_path_generator, client_id: @client) => {
        title: 'Team Members',
        permission: show_health_hpc,
      },
      polymorphic_path(health_path_generator + [:services], client_id: @client) => {
       title: 'Services',
       permission: show_health_hpc,
      },
      polymorphic_path(health_path_generator + [:backup_plans], client_id: @client) => {
        title: 'Backup Plans',
        permission: show_health_hpc,
      },
      polymorphic_path(goals_path_generator, client_id: @client) => {
        title: 'Goals',
        permission: show_health_hpc,
      },
      polymorphic_path(health_path_generator + [:files], client_id: @client) => {
       title: 'Files',
       permission: show_health_hpc,
      },
      client_health_patient_referrals_path(client_id: @client) => {
        title: 'Enrollment History',
        permission: show_health_hpc,
      },
      client_health_qualifying_activities_path(client_id: @client) => {
        title: 'Qualifying Activities',
        permission: show_health_hpc,
      },

      # Pilot Pages
      polymorphic_path(health_pilot_path_generator + [:patient, :index], client_id: @client) => {
       title: 'Health Dashboard',
       permission: show_health_pilot,
      },
      polymorphic_path(careplan_pilot_path_generator, client_id: @client) => {
       title: 'Care Plan',
       permission: show_health_pilot,
      },
      polymorphic_path(health_pilot_path_generator + [:metrics], client_id: @client) => {
        title: 'Metrics',
        permission: show_health_pilot,
      },
      polymorphic_path(health_path_generator + [:metrics], client_id: @client) => {
        title: 'Metrics',
        permission: show_health_hpc,
      },
    }
    if RailsDrivers.loaded.include?(:health_flexible_service)
      can_see_vpr = current_user.can_view_my_vprs? && @client.health_housing_navigator_id == current_user.id
      health.merge!({
        client_health_flexible_service_vprs_path(@client) => {
          title: 'Flex Services',
          permission: can_see_vpr || current_user.can_view_all_vprs?,
        },
      })
    end
  = render 'clients/pre_navigation_bar'
  = render 'menus/client_tab_navigation', current: current, always_visible: always_visible, hmis: hmis, health: health
