- charts = vm.charts(data_type, by)
- chart_1_data = charts[chart_1]
- chart_1_id = vm.chart_id(data_type, chart_1, by)
- chart_2_data = charts[chart_2]
- chart_2_id = vm.chart_id(data_type, chart_2, by)
- legend_id = vm.legend_id(data_type, by)
- collapse_id = vm.collapse_id(data_type, by)
- table_id = vm.table_id(data_type, by)
- chart_type = 'InitiativeStackedBar'
- if ['d3-length_of_stay_breakdowns-mm-by-project_type__table', 'd3-length_of_stay_breakdowns-mm-by-project__table', 'd3-income_most_recent_breakdowns-mm-by-project_type__table', 'd3-income_most_recent_breakdowns-mm-by-project__table'].include?(table_id)
  - chart_type = 'InitiativeStackedSummaryBar'
=# debug [data_type, by, table_id]
.ho-container.loso__container
  .ho-container__header
    %h4= title
  .row
    .col-sm-12
      .loso__legend
        .clearfix{id: legend_id}
  .row
    - empty = false
    - [chart_1, chart_2].each do |period|
      .col-sm-12.col-md-6
        %h5{style: 'margin-left: 20px;'}= vm.chart_title(period)
        - if vm.empty?(data_type, by, period)
          - empty = true
          %p{style: 'margin-left: 20px;'} No Data
        - else
          %div{id: vm.chart_id(data_type, period, by)}
  .loso-footer
    %button.btn.btn-secondary.btn-sm{data: {toggle: 'collapse', target: "##{collapse_id}"}}
      Show Details
  .collapse.loso-collapse{id: collapse_id}
    - stackKeys = vm.stack_keys(data_type, by)
    - table_rows = vm.table_rows(by)
    %div{id: table_id}
      - [chart_1, chart_2].each_with_index do |chart, i|
        - data = i == 0 ? chart_1_data : chart_2_data
        %table.table.loso-table
          %tr
            %th{width: '100px'}
            %th{width: '180px'}
            - data[:keys].each do |key|
              %th.text-center{width: '150px'}
                = data[:labels][key]
          - table_rows.each_with_index do |row, index|
            %tr
              - if index == 0
                %th.loso-table__label{rowspan: table_rows.size}= (chart == :report || chart == :comparison) ? vm.chart_title(chart) : chart.to_s.titleize
              %th{data: {d3_key: row}}
                = (row == :report || row == :comparison) ? "#{row.to_s} Period".titleize : row.to_s
              - data[:keys].each do |key|
                %td.text-center
                  - count = (data[:data].select{|d| d[:type] == row.to_s}[0] || {})[key]
                  - support_key = chart_1_data.try(:[], :support_keys).try(:[], row.to_s).try(:[], key)
                  - support_section = vm.support_section(data_type, by)
                  =# debug chart_1_data.try(:[], :support_keys)
                  =# debug row
                  =# debug key
                  - if chart == :comparison
                    - support_section = "#{chart}_#{support_section}"
                  - should_link = count > 0 && support_key.present? && can_administer_assigned_reports?
                  =link_to_if(should_link, count, warehouse_report_support_index_path(@report.id, key: support_key, section: support_section), data: { loads_in_pjax_modal: true })

- if !empty
  - content_for :page_js do
    :javascript
      $(document).ready(function() {
        var chart1Data = #{chart_1_data.to_json.html_safe};
        var chart1Id = '#'+#{chart_1_id.to_json.html_safe};
        var legendId = '#'+#{legend_id.to_json.html_safe};
        var tableId = '#'+#{table_id.to_json.html_safe};

        var chart2Data = #{chart_2_data.to_json.html_safe};
        var chart2Id = '#'+#{chart_2_id.to_json.html_safe};

        var chart1;
        var chart2;
        $(window).on('resize', function() {
          if($(chart1Id).is(':visible')) {

            chart1 = new App.D3Chart.#{chart_type}(chart1Id, tableId, legendId, {top: 20, right: 50, bottom: 20, left: 20}, chart1Data, '#{@report_range.first.to_date} to #{@report_range.last.to_date}', '#{@comparison_range.first.to_date} to #{@comparison_range.last.to_date}');
            chart2 = new App.D3Chart.#{chart_type}(chart2Id, false, false, {top: 20, right: 50, bottom: 20, left: 20}, chart2Data, '#{@report_range.first.to_date} to #{@report_range.last.to_date}', '#{@comparison_range.first.to_date} to #{@comparison_range.last.to_date}');

            chart1.draw();
            chart2.draw();
          }
        });
      });
