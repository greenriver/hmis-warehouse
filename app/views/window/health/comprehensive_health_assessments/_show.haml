- content_for :modal_title, 'Comprehensive Health Assessment'

- if @cha.present?
  .d-flex
    .cha__summary
      %dl.mb-2
        %dt.inline Name:
        %dd.inline= @client.name
        %dd.breaker
        %dt.inline Date Completed:
        %dd.inline= @cha.completed_at&.to_date || 'in progress'
        %dd.breaker
        %dt.inline Completed By:
        %dd.inline= @cha.user&.name
        %dd.breaker
        - if @cha.health_file.present?
          %dt.inline File (see attached):
          %dd.inline= link_to @cha.health_file&.name, polymorphic_path([:download] + cha_path_generator, client_id: @client.id, id: @cha)

        - if @cha.reviewed_by
          %dd.breaker
          %dt.inline Reviewed By:
          %dd.inline= @cha.reviewer
    - if @cha.editable_by?(current_user)
      .ml-auto
        - if ! @cha_locked
          = link_to 'Edit', polymorphic_path([:edit] + cha_path_generator, id: @cha.id), class: 'btn btn-primary btn-primary__reverse', data: { disable_with: 'Loading...', toggle: 'tooltip' }
        - else
          .alert.alert-info
            = _('A claim was submitted for this CHA; it is no longer editable.')

  %p.text-right(style="font-size:smaller;font-style:italic;")
    Only answered questions are shown.

  - @cha.answers.each do |section, section_hash|
    .client__assessment-section-summary.cha__section
      %h3= section_hash['title']
      - section_hash['answers'].each do |code, question_answer|
        - question = question_answer['question']
        - answer   = question_answer['answer']
        - next if code.match(/(g_q1.)c$/) # we'll display these along with the p counterparts
        - next if matches = code.match(/(l_q)\ds\d[b-z]$/) # we'll display these manually
        - next if code.match(/i_q2[b-z]\d$/)
        - next if code.match(/i_q2a[23]$/)
        - next if answer.blank? || (answer.is_a?(Array) && answer.compact.all?(&:blank?))
        - classes = [code]
        - if matches = code.match(/((l_q)1s.).*/) || code.match(/((i_q)2.).*/) || code.match(/((g_q)1.).*/)
          - classes << matches.try(:[], 1)
          - classes << matches.try(:[], 2)
        - if matches = code.match(/(g_q1.)p$/)
          - code2 = "#{matches[1]}c"
          - question2 = section_hash['answers'][code2]['question']
          - answer2 = section_hash['answers'][code2]['answer']
          %div{class: classes}
            - if code == 'g_q1ap'
              %h4= _('CHA G_Q1_HEADER')
              %p.cha__help-text= _('CHA G_Q1_SUBHEADER')
            %h5= question_answer.try(:[], 'header')
            .cha__help-text.mb-4
              = question_answer.try(:[], 'sub_header')
            .row.cha__section-columns
              .col-sm-6
                .client__assessment-question
                  = question
                .client__assessment-answer
                  = answer
              .col-sm-6
                .client__assessment-question
                  = question2
                .client__assessment-answer
                  = answer2
        - elsif matches = code.match(/i_q2a1$/)
          -# = debug code
          - if code == 'i_q2a1'
            %h4= _('CHA I_Q2_HEADER')
            - ('a'..'z').each do |letter|
              .row.cha__section-columns
                - (1..3).each do |number|
                  - code = "i_q2#{letter}#{number}"
                  - question = section_hash['answers'][code].try(:[], 'question')
                  - answer = section_hash['answers'][code].try(:[], 'answer')
                  - next unless answer.present?
                  .col-sm-4{class: classes}
                    .client__assessment-question
                      = question
                    .client__assessment-answer
                      = answer
        - elsif matches = code.match(/l_q(\d)s(\d)a$/)
          - main = matches[1]
          - sub_num = matches[2]
          %div.row
            .col-sm-12
              - if code == 'l_q1s1a'
                %h4= _('CHA L_Q1S1A_HEADER')
                %p.cha__help-text= _('CHA L_Q1S1A_SUBHEADER').html_safe
              .client__assessment-question
                = question
              .client__assessment-answer
                = answer
              .row.cha__section-columns
                - ('b'..'g').each do |letter|
                  - code = "l_q#{main}s#{sub_num}#{letter}"
                  - question = section_hash['answers'][code]['question']
                  - answer = section_hash['answers'][code]['answer']
                  .col-sm-4{class: classes}
                    .client__assessment-question
                      = question
                    .client__assessment-answer
                      = answer
        - else
          %div{class: classes}
            - # = debug code
            - if code == 'g_q2a'
              %h4= _('CHA G_Q2_HEADER')
              %p.cha__help-text= _('CHA G_Q2_SUBHEADER')
            - if code == 'j_q3a'
              %h4= _('CHA J_Q3_HEADER')
            %h5= question_answer.try(:[], 'header')
            .cha__help-text.mb-4
              = question_answer.try(:[], 'sub_header')
            .client__assessment-question
              = question
            .client__assessment-answer
              - case answer
              - when Array
                %ul
                - answer.compact.reject(&:blank?).each do |a|
                  %li= a
              - else
                - case code
                - when 'a_q5a' # SSN
                  = masked_ssn answer
                - when 'a_q3' # DOB
                  =l answer&.to_date
                - else
                  = answer
      - if section == 'I' && @problems.present?
        %h4 Epic Problems
        = render 'window/health/problems/problems_table', problems: @problems
      - if section == 'L' && @medications.present?
        %h4 Epic Medications
        = render 'window/health/medications/medications_table', medications: @medications