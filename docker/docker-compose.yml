version: '3.8'

x-app: &app
  image: hmis-warehouse:4.0
  build:
    context: .
    dockerfile: docker/app/Dockerfile
    target: dev-build
    args:
      RUBY_VERSION: 3.1.4
      BUNDLER_VERSION: '2.4.13'
      USER_ID: ${USER_ID:-1001}
      GROUP_ID: ${GROUP_ID:-1001}
      BUILD_TAG: 3.1.4-alpine3.18
  environment: &env
    AWS_REGION: ${AWS_REGION:-us-east-1}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    AWS_SECURITY_TOKEN: ${AWS_SECURITY_TOKEN:-}
    AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
    NODE_ENV: ${NODE_ENV:-development}
    BOOTSNAP_CACHE_DIR: /bundle/bootsnap
    WEBPACKER_DEV_SERVER_HOST: webpacker
    HISTFILE: /app/log/.bash_history
    PSQL_HISTFILE: /app/log/.psql_history
    EDITOR: vi
    CHROMEDRIVER_VERSION: 79.0.3945.36
    GROVER_NO_SANDBOX: 'true'
    BUNDLE_FORCE_RUBY_PLATFORM: 'true'
    CHROME_URL: http://chrome:3333

  env_file:
    - .env.development.local
    - .env.local

x-backend: &backend
  <<: *app
  stdin_open: true
  tty: true
  volumes:
    - .:/app:cached
    - rails_cache_alpine:/app/tmp/cache
    - bundle_alpine:/bundle
    - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates
    - /etc/ssl/certs:/etc/ssl/certs
    - node_modules_alpine:/node_modules

services:
  shell:
    <<: *backend
    profiles:
      - manual
    command: /bin/bash
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  spec:
    <<: *backend
    profiles:
      - manual
    command: /bin/bash
    entrypoint: '/usr/bin/entrypoint.spec.sh'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env.local
      - .env.test

  console:
    <<: *backend
    profiles:
      - manual
    # entrypoint: ''
    stdin_open: true
    tty: true
    command: bundle exec rails console
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  dj:
    <<: *backend
    command: ./bin/rake jobs:work
    entrypoint: ''
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  yarn:
    <<: *backend
    container_name: hmis-warehouse-yarn
    stdin_open: true
    tty: true
    command: yarn build --watch
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  web:
    <<: *backend
    container_name: hmis-warehouse-web
    stdin_open: true
    tty: true
    command: bin/rails server -b 0.0.0.0
    ports:
      - "3000"
      - "9394"
    expose:
      - "3000"
      - "9394"
    environment:
      <<: *env
      VIRTUAL_HOST: ${FQDN:-hmis-warehouse.dev.test}
      VIRTUAL_PORT: 3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      yarn:
        condition: service_started
      oauth2-proxy:
        condition: service_started
    hostname: warehouse.dev.test

  # To transition from a previous major version to pg13, run ./docker/pg13/upgrade.db
  db_previous:
    build:
      context: docker/pg12
    container_name: db_previous
    profiles:
      - manual
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore
      PGPASSWORD: postgres
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - 5432
    expose:
      - 5432

  # This should no longer need to be overridden for ARM
  # processors
  db:
    build:
      context: docker/pg13
    container_name: hmis-warehouse-db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore
      PGPASSWORD: postgres
      PGUSER: postgres
      # You may want to store your db data locally rather than in a docker volume
      # to do that, set:
      # DB_DATA_VOLUME=./dev/db_data
      DB_DATA_VOLUME: ${DB_DATA_VOLUME:-dbdata_pg13}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      # Name each new postgres major version explicitly (dbdata_pg14 when we get to that)
      - ${DB_DATA_VOLUME:-dbdata_pg13}:/var/lib/postgresql/data
      - ./tmp/dumps:/tmp/dumps
    ports:
      - 5432
    expose:
      - 5432
    stop_grace_period: 30s

  redis:
    container_name: hmis-warehouse-redis
    image: redis:alpine
    volumes:
      - redis:/data
    expose:
      - 6379

  chrome:
    image: browserless/chrome:1-chrome-stable
    profiles: ["test"]
    ports:
      - "3333:3333"
    # Mount application source code to support file uploading
    # (otherwise Chrome won't be able to find files).
    # NOTE: Make sure you use absolute paths in `#attach_file`.
    volumes:
      - .:/app
    environment:
      # By default, it uses 3000, which is typically used by Rails.
      PORT: 3333
      # Set connection timeout to avoid timeout exception during debugging
      # https://docs.browserless.io/docs/docker.html#connection-timeout
      CONNECTION_TIMEOUT: 600000

  sftp:
    container_name: hmis-warehouse-sftp
    build:
      context: docker/sftp
    volumes: []
      # I took this out because it has the wrong permissions and I couldn't
      # upload anything, and the one spec file that uses it seems disabled.
      #- ./tmp/sftp_spec:/home/user/sftp

  # See config/storage.yml for setup
  minio:
    container_name: s3
    image: minio/minio
    volumes:
      - ./dev/minio/data:/data
      - ./dev/minio/certs:/certs
    hostname: s3.dev.test
    environment:
      MINIO_ACCESS_KEY: local_access_key
      MINIO_SECRET_KEY: local_secret_key
      MINIO_ROOT_USER: local_access_key
      MINIO_ROOT_PASSWORD: local_secret_key
    expose:
      - '9000'
      - '9001'
    ports:
      - 9000:9000
      - 9001:9001 # enable for UI access
    command: server --certs-dir /certs /data
  # Access http://oauth2-proxy.dev.test:4180 to initiate a login cycle
  # some useful notes about setting up SSL certs
  # mkcert -install
  # mkcert dev.test "*.dev.test" localhost 127.0.0.1 ::1
  # mkcert -CACERT
  # copy the certs and CA cert to dev/auth/certs/
  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    command: --config /oauth2-proxy.cfg
    hostname: hmis-warehouse.dev.test
    volumes:
      - "./dev/auth/oauth2-proxy.cfg:/oauth2-proxy.cfg"
      # - "./dev/auth/certs/dev.test.crt:/etc/certs/dev.test.crt"
      # - "./dev/auth/certs/dev.test.key:/etc/certs/dev.test.key"
      # - "./dev/auth/certs/ca/rootCA.pem:/etc/certs/root-ca.pem"
    labels:
      - traefik.enable=${TRAEFIK_ENABLED:-false}
      - traefik.http.routers.op.entrypoints=web
      - traefik.http.routers.op.rule=Host(`${FQDN:-hmis-warehouse.dev.test}`)
      - traefik.http.services.op_https.loadbalancer.server.port=4180
      - traefik.http.routers.op_https.rule=Host(`${FQDN:-hmis-warehouse.dev.test}`)
      - traefik.http.routers.op_https.tls=true
      - traefik.http.routers.op_https.entrypoints=web-secure
      - traefik.http.middlewares.op_https.redirectscheme.scheme=https
      - traefik.http.routers.op.middlewares=op_https
    restart: unless-stopped
    ports:
      - 4180:4180/tcp
    depends_on:
      - dex
  dex:
    container_name: dex
    # image: dexidp/dex:latest-alpine
    image: ghcr.io/dexidp/dex:v2.39.0
    command: dex serve /dex.yaml
    hostname: dex
    volumes:
      - "./dev/auth/dex.yaml:/dex.yaml"
      # - "./dev/auth/certs/dev.test.crt:/etc/certs/dev.test.crt"
      # - "./dev/auth/certs/dev.test.key:/etc/certs/dev.test.key"
      # - "./dev/auth/certs/ca/rootCA.pem:/etc/certs/root-ca.pem"
    restart: unless-stopped
    ports:
      - 4443:4443/tcp
    networks:
      default:
        aliases:
          - dex.dev.test
    depends_on:
      - etcd
  etcd:
    container_name: etcd
    image: gcr.io/etcd-development/etcd:v3.5.13
    entrypoint: /usr/local/bin/etcd
    command:
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd:2379

volumes:
  bundle_alpine:
  node_modules_alpine:
  rails_cache_alpine:
  dbdata:
  dbdata_pg13:
  redis:
  ngrok:

networks:
  default:
    name: traefik
    external: true
