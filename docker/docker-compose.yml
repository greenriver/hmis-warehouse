version: '3.8'

x-app: &app
  image: hmis-warehouse:3.7
  build:
    context: .
    args:
      RUBY_VERSION: 3.1.4
      BUNDLER_VERSION: '2.4.13'
      USER_ID: ${USER_ID:-1001}
      GROUP_ID: ${GROUP_ID:-1001}
  environment: &env
    AWS_REGION: ${AWS_REGION:-us-east-1}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    AWS_SECURITY_TOKEN: ${AWS_SECURITY_TOKEN:-}
    AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
    NODE_ENV: ${NODE_ENV:-development}
    BOOTSNAP_CACHE_DIR: /bundle/bootsnap
    WEBPACKER_DEV_SERVER_HOST: webpacker
    HISTFILE: /app/log/.bash_history
    PSQL_HISTFILE: /app/log/.psql_history
    EDITOR: vi
    CHROMEDRIVER_VERSION: 79.0.3945.36
    GROVER_NO_SANDBOX: 'true'
    BUNDLE_FORCE_RUBY_PLATFORM: 'true'
  env_file:
    - .env.development.local
    - .env.local
  tmpfs:
    - /tmp

x-backend: &backend
  <<: *app
  stdin_open: true
  tty: true
  volumes:
    - .:/app:cached
    - rails_cache_alpine:/app/tmp/cache
    - bundle_alpine:/bundle
    - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates
    - /etc/ssl/certs:/etc/ssl/certs
    - node_modules_alpine:/node_modules

services:
  shell:
    <<: *backend
    profiles:
      - manual
    command: /bin/bash
    depends_on:
      - db
      - redis

  spec:
    <<: *backend
    profiles:
      - manual
    command: /bin/bash
    entrypoint: '/usr/bin/spec.entrypoint.sh'
    depends_on:
      - db
      - redis
      - minio
    env_file:
      - .env.local
      - .env.test

  console:
    <<: *backend
    profiles:
      - manual
    # entrypoint: ''
    stdin_open: true
    tty: true
    command: bundle exec rails console
    depends_on:
      - db
      - redis
      - mailhog
      - minio

  dj:
    <<: *backend
    command: ./bin/rake jobs:work
    entrypoint: ''
    depends_on:
      - db
      - redis
      - minio

  web:
    <<: *backend
    container_name: hmis-warehouse-web
    stdin_open: true
    tty: true
    command: bundle exec rails server -b 0.0.0.0
    labels:
      - "traefik.http.routers.op.rule=Host(`${FQDN:-hmis-warehouse.dev.test}`)"
      - "traefik.http.routers.op.tls=true"
      - "traefik.http.services.op.loadbalancer.server.port=3000"
    ports:
      - "3000"
      - "9394"
    expose:
      - "3000"
      - "9394"
    environment:
      <<: *env
      VIRTUAL_HOST: ${FQDN:-hmis-warehouse.dev.test}
      VIRTUAL_PORT: 3000
    depends_on:
      - db
      - redis
      - mailhog
      - minio

  # Starts a tunnel *from* an external point to the local web service. This
  # makes your local development environment available on the public internet.
  # We do this because superset needs to make a tls connection to the warehouse
  # and self-signed certificates are not allowed.
  #
  # To see public url
  # docker compose exec ngrok cat /ngrok/public_url
  #
  # Note: `docker compose up` works, though there will be no output. Use `docker
  # compose run` to see the output
  ngrok: &ngrok
    network_mode: host
    tty: true
    stdin_open: true
    volumes:
      - ngrok:/ngrok
    expose: ['4040']
    ports: ['4040']
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN:-setme_warning_web_app_will_be_available_on_internet}
      NGROK_API_KEY: ${NGROK_API_KEY:-setme}
    image: ngrok/ngrok
    command:
      - http
      - https://${FQDN:-hmis-warehouse.dev.test}
      - --request-header-add=host:${FQDN:-hmis-warehouse.dev.test}
      - --log=stdout
      - --log-level=info
      #- --basic-auth="${NGROK_BASIC_AUTH_USERNAME:-op-dev}:${NGROK_BASIC_AUTH_PASSWORD:-375148e9582f2369475505f2c6f8a5be}"

  # Assumes one ngrok tunnel active
  # Places the public URL into /ngrok/public_url
  # This service effectively just introspects the public_url since we can't
  # specify one without a paid plan.
  ngrok_public:
    <<: *ngrok
    user: root
    entrypoint: ''
    command: bash -c 'sleep 3 && rm -f /ngrok/public_url && ngrok api tunnels list --api-key=\$NGROK_API_KEY | grep public_url | cut -d\" -f4 > /ngrok/public_url'
    depends_on:
      ngrok:
        condition: service_started

  # To transition from a previous major version to pg13, run ./docker/pg13/upgrade.db
  db_previous:
    build:
      context: docker/pg12
    container_name: db_previous
    profiles:
      - manual
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore
      PGPASSWORD: postgres
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - 5432
    expose:
      - 5432

  # This should no longer need to be overridden for ARM
  # processors
  db:
    build:
      context: docker/pg13
    container_name: hmis-warehouse-db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore
      PGPASSWORD: postgres
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      # Name each new postgres major version explicitly (dbdata_pg14 when we get to that)
      - dbdata_pg13:/var/lib/postgresql/data
      - ./tmp/dumps:/tmp/dumps
    ports:
      - 5432
    expose:
      - 5432

  redis:
    container_name: hmis-warehouse-redis
    image: redis:alpine
    volumes:
      - redis:/data
    expose:
      - 6379

  mailhog:
    image: mailhog/mailhog:latest
    environment:
      VIRTUAL_HOST: mail.${FQDN:-hmis-warehouse.dev.test}
      VIRTUAL_PORT: 8025
    expose:
      - 8025
      - 1025

  sftp:
    container_name: hmis-warehouse-sftp
    build:
      context: docker/sftp
    volumes: []
      # I took this out because it has the wrong permissions and I couldn't
      # upload anything, and the one spec file that uses it seems disabled.
      #- ./tmp/sftp_spec:/home/user/sftp

  # On arm64, you'll need to run this before things work:
  #   docker run --privileged --rm tonistiigi/binfmt --install amd64
  #
  # First time running:
  #   docker compose run superset /app/pythonpath/init.sh
  superset: &superset
    container_name: hmis-warehouse-superset
    build:
      context: docker/superset
    image: op-superset
    platform: linux/amd64
    labels:
      - "traefik.http.routers.op-superset.rule=Host(`superset.${FQDN:-hmis-warehouse.dev.test}`)"
      - "traefik.http.routers.op-superset.tls=true"
      - "traefik.http.services.op-superset.loadbalancer.server.port=8088"
    environment:
      SUPERSET_ADMIN_PASSWORD: admin
      SUPERSET_SECRET_KEY: superset-secret-key-1234
      VIRTUAL_HOST: superset.${FQDN:-hmis-warehouse.dev.test}
      WAREHOUSE_URL: https://${FQDN:-hmis-warehouse.dev.test}
      VIRTUAL_PORT: 8088
      SUPERSET_WEBDRIVER_BASEURL: ${SUPERSET_WEBDRIVER_BASEURL:-http://superset:8088/}
      # These need to come from /oauth/applications in the warehouse
      # application when logged in as an admin
      SUPERSET_OAUTH_CLIENT_ID: ${SUPERSET_OAUTH_CLIENT_ID:-setme}
      SUPERSET_OAUTH_CLIENT_SECRET: ${SUPERSET_OAUTH_CLIENT_SECRET:-setme}
      SUPERSET_USE_OAUTH: ${SUPERSET_USE_OAUTH:-false}
      NGROK_BASIC_AUTH_USERNAME: ${NGROK_BASIC_AUTH_USERNAME:-op-dev}
      NGROK_BASIC_AUTH_PASSWORD: ${NGROK_BASIC_AUTH_PASSWORD:-375148e9582f2369475505f2c6f8a5be}
    depends_on:
      db:
        condition: service_healthy
      ngrok:
        condition: service_started
      ngrok_public:
        condition: service_completed_successfully
      superset_init:
        condition: service_completed_successfully
      superset_init_2:
        condition: service_completed_successfully
    expose:
      - 8088
    volumes:
      - ./docker/superset/op:/app/pythonpath
      - ngrok:/ngrok

  # See config/storage.yml for setup
  minio:
    container_name: s3
    image: minio/minio
    volumes:
      - ~/minio/data:/data
      - ~/.minio/certs:/certs
    hostname: s3.dev.test
    environment:
      MINIO_ACCESS_KEY: local_access_key
      MINIO_SECRET_KEY: local_secret_key
      MINIO_ROOT_USER: local_access_key
      MINIO_ROOT_PASSWORD: local_secret_key
    expose:
      - '9000'
      - '9001'
    ports:
      - 9000:9000
      - 9001:9001 # enable for UI access
    command: server --certs-dir /certs /data

  superset_init:
    container_name: superset_make_db
    environment:
      PGPASSWORD: postgres
      PGUSER: postgres
      PGHOST: db
    image: postgis/postgis:12-3.1-alpine
    entrypoint: /superset_init_entrypoint.sh
    command:
      - ''
    volumes:
      - ./docker/superset/superset_init_entrypoint.sh:/superset_init_entrypoint.sh
    depends_on:
      - db

  superset_init_2:
    <<: *superset
    container_name: superset_init_user_and_db_structure
    entrypoint: ''
    command: /init.sh
    volumes:
      - ./docker/superset/op/init.sh:/init.sh
      - ./docker/superset/op:/app/pythonpath
    depends_on:
      superset_init:
        condition: service_completed_successfully
      db:
        condition: service_healthy

volumes:
  bundle_alpine:
  node_modules_alpine:
  rails_cache_alpine:
  dbdata:
  dbdata_pg13:
  redis:
  ngrok:

networks:
  default:
    name: nginx-proxy
    external: true
