- denominator_label = @report.detail_denominator_label_for(key)
- numerator_label = @report.detail_numerator_label_for(key)
.d-flex.justify-content-around.mb-4
  - if denominator_label.present? && show_label_detail
    .col-4
      = render 'warehouse_reports/indicator', indicator: @report.detail_indicator_result(result, key)
    .col-8.d-flex.justify-content-end.pr-0
      .col-6
        .c-chart--vertical-bar{ class: class_name, data: { chart: result.data_for_system_level_bar.to_json }}
      .col-5.d-flex.align-items-center.mb-6.pr-0
        .card.p-3
          .mb-6.d-flex
            .mr-2 #{result.report_year}:
            %div
              %strong= result.reporting_numerator
              = numerator_label
              of
              %strong= result.reporting_denominator
              = denominator_label
          .mb-0.d-flex
            .mr-2 #{result.comparison_year}:
            %div
              %strong= result.comparison_numerator
              = numerator_label
              of
              %strong= result.comparison_denominator
              = denominator_label
  - else
    .col-6
      = render 'warehouse_reports/indicator', indicator: @report.detail_indicator_result(result, key)
    .col-5
      .c-chart--vertical-bar{ class: class_name, data: { chart: result.data_for_system_level_bar.to_json }}
    .col-1

= content_for :page_js do
  :javascript
    $(document).ready(function() {
      const data = $('.#{class_name}').data('chart');
      const max = Math.max(...data.columns[1].slice(1));
      const includePercent = #{result.percentage?};
      const max_100 = #{result.max_100?};
      const goal = #{@report.detail_goal_for_reference_line(key).to_json};
      let axisMax = max < goal && goal !== null ? goal : undefined;
      if(max_100) {
        axisMax = 100;
      }
      const tooltipTitles = #{result.titles_for_system_level_bar_tooltip.to_json.html_safe}

      data.labels.format = function (v, id, i, texts) {
        if (v < (axisMax || max) * 0.15) {
          return '';
        }
        if (includePercent) {
          return d3.format(".0%")(v / 100);
        } else {
          return d3.format(",d")(v);
        }
      }
      options = {
        data: data,
        axis: {
          rotated: includePercent,
          x: { type: 'category' },
          y: {
            tick: {
              stepSize: 1,
              count: 3,
              format: function(x) { return `${d3.format('d')(x)}${includePercent ? '%' : ''}`}
            },
            ...(axisMax && { max: axisMax }),
          },
        },
        size: { height: 150 },
        legend: { show: false },
        tooltip: {
          contents: (d, defaultTitleFormat, defaultValueFormat, color) => {
            const data = d[0];

            // Build ratio description
            let description = '';
            const denominatorLabel = "#{@report.detail_denominator_label_for(key)}";
            const numeratorLabel = "#{@report.detail_numerator_label_for(key)}";
            if (denominatorLabel) {
              const numer = data.index === 0 ? "#{result.reporting_numerator}" : "#{result.comparison_numerator}";
              const denom = data.index === 0 ? "#{result.reporting_denominator}" : "#{result.comparison_denominator}";
              description = ` (${numer} ${numeratorLabel} of ${denom} ${denominatorLabel})`;
            }

            let html = "<table class='bb-tooltip' style='opacity: 1;'>";
            html += "<thead>";
            html += `<tr><th colspan="3">${tooltipTitles[data.index]}</th></tr>`
            if (goal) html += `<tr><th></th><th>Value</th><th>Goal</th></tr>`;
            html += "</thead>";
            html += "<tbody>";

            const bg_color = color(data.id);
            const box = `<td style='white-space: nowrap;'><svg><rect style='fill:${bg_color}' width='10' height='10'></rect></svg>${data.name}</td>`;
            const value = `<td style='white-space: nowrap;'>${defaultValueFormat(data.value)}${description}</td>`;
            html += box;
            html += value;
            if (goal)
              html += `<td style='white-space: nowrap;'>${defaultValueFormat(goal)}</td>`;
            html += "</tr>";
            html += "</tbody>";
            html += '</table>';
            return html;
          },
        },
        ...(goal !== null && {
          grid: {
            lines: { front: false },
            y: { lines: [{ value: goal }] } }
        }),
        bindto: '.#{class_name}'
      };
      if(max_100) {
        options.axis.y.padding = { top: 0, bottom: 0}
      }
      const chart = bb.generate(options);
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-width', 2)
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-dasharray', 2)
    });
