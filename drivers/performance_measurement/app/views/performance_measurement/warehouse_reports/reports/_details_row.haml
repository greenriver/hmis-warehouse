- denominator_label = @report.detail_denominator_label_for(key)
- numerator_label = @report.detail_numerator_label_for(key)
- pit_count_types = @report.detail_pit_types(key)
- project_id = if defined?(project_id) then project_id else nil end
%h3.mb-6= @report.detail_title_for(key)
.row
  .col-6
    - status = result.passed ? 'success' : 'danger'
    - icon = result.passed ? 'check' : 'cross'
    - label = result.passed ? 'Passed' : 'Failed'
    - primary_value = number_with_delimiter(result.primary_value).to_s
    - primary_value += ' %' if result.percentage?
    - primary_unit = result.primary_unit.sub('% ', '')
    - if @report.result_includes_median?(result.field)
      - primary_unit = "Average #{primary_unit}"
      - median = result.related_median
      - median_unit = "Median #{median.primary_unit}"
    .row
      - if result.tagged?
        .col-sm-4
          = tagged(result.passed, status, icon: icon, label: label)
      .col-sm-4
        .performance-measurement__result-number.font-weight-bold= "#{number_with_delimiter(result.secondary_value)} #{result.secondary_unit}"
        .text-capitalize= sanitize(result.value_label)
        - if @report.result_includes_median?(result.field)
          .performance-measurement__result-number.font-weight-bold.mt-4= "#{number_with_delimiter(median.secondary_value)} #{median.secondary_unit}"
          .text-capitalize= sanitize(median.value_label)
      .col-sm-4
        .performance-measurement__result-number.font-weight-bold
          - if project_id.present? && can_access_some_version_of_clients?
            = link_to performance_measurement_warehouse_reports_report_clients_path(@report.id, key, project_id) do
              = primary_value
          - else
            = primary_value
        .text-capitalize= primary_unit
        - if @report.result_includes_median?(result.field)
          .performance-measurement__result-number.font-weight-bold.mt-4= number_with_delimiter(median.primary_value).to_s
          .text-capitalize= median_unit
      - if pit_count_types.present?
        .col-sm-4
        - pit_count_types.each do |type|
          - if result.pit_count.present?
            .col-sm-4
              .performance-measurement__result-number.font-weight-bold.mt-4= result.pit_count.public_send(type)
              .text-capitalize #{type.to_s.humanize} PIT Count

  .col-6
    %div
      .ml-auto.c-chart--vertical-bar{ class: class_name, data: { chart: result.data_for_system_level_bar.to_json }}
    - if denominator_label.present? && show_label_detail
      .card.p-3.mt-4
        .mb-0.d-flex
          .mr-2 #{result.comparison_year}:
          .mb-0
            %strong= result.comparison_numerator
            = numerator_label
            of
            %strong= result.comparison_denominator
            = denominator_label
        .mb-0.d-flex
          .mr-2 #{result.report_year}:
          .mb-0
            %strong= result.reporting_numerator
            = numerator_label
            of
            %strong= result.reporting_denominator
            = denominator_label

= content_for :page_js do
  :javascript
    $(document).ready(function() {
      const data = $('.#{class_name}').data('chart');
      const max = Math.max(...data.columns[1].slice(1));
      const includePercent = #{result.percentage?};
      const max_100 = #{result.max_100?};
      const goal = #{@report.detail_goal_for_reference_line(key).to_json};
      let axisMax = max < goal && goal !== null ? goal : undefined;
      if(max_100) {
        axisMax = 100;
      }
      const tooltipTitles = #{result.titles_for_system_level_bar_tooltip.to_json.html_safe}
      data.labels.format = function (v, id, i, texts) {
        if (v < (axisMax || max) * 0.15) {
          return '';
        }
        if (includePercent) {
          return d3.format(",.0%")(v / 100);
        } else {
          return d3.format(",d")(v);
        }
      }
      options = {
        data: data,
        axis: {
          rotated: includePercent,
          x: { type: 'category' },
          y: {
            tick: {
              stepSize: 1,
              count: 3,
              format: function(x) { return `${d3.format(',d')(x)}${includePercent ? '%' : ''}`}
            },
            ...(axisMax && { max: axisMax }),
          },
        },
        size: { height: 150 },
        padding: {
          top: 1,
        },
        legend: { show: data.columns.length > 2 },
        tooltip: {
          contents: (d, defaultTitleFormat, defaultValueFormat, color) => {
            const data = d[0];
            // Build ratio description
            let description = '';
            const denominatorLabel = "#{@report.detail_denominator_label_for(key)}";
            const numeratorLabel = "#{@report.detail_numerator_label_for(key)}";
            let numer, denom;
            if (denominatorLabel) {
              if (includePercent) {
                numer = data.index === 0 ? "#{result.comparison_numerator}" : "#{result.reporting_numerator}";
                denom = data.index === 0 ? "#{result.comparison_denominator}" : "#{result.reporting_denominator}";
              } else {
                numer = data.index === 0 ? "#{result.reporting_numerator}" : "#{result.comparison_numerator}";
                denom = data.index === 0 ? "#{result.reporting_denominator}" : "#{result.comparison_denominator}";
              }
              description = ` (${numer} ${numeratorLabel} of ${denom} ${denominatorLabel})`;
            }

            let html = "<table class='bb-tooltip' style='opacity: 1;'>";
            html += "<thead>";
            html += `<tr><th colspan="3">${tooltipTitles[data.index]}</th></tr>`
            if (goal) html += `<tr><th></th><th>Value</th><th>Goal</th></tr>`;
            html += "</thead>";
            html += "<tbody>";

            d.forEach((row, index, arr) => {
              html += "<tr>";
              let bg_color = color(d[index].id);
              let box = `<td style='white-space: nowrap;'><svg><rect style='fill:${bg_color}' width='10' height='10'></rect></svg>${d[index].name}</td>`;
              let value = `<td style='white-space: nowrap;'>${defaultValueFormat(d[index].value)}${description}</td>`;
              html += box;
              html += value;
              if (goal)
                html += `<td style='white-space: nowrap;'>${defaultValueFormat(goal)}</td>`;
            });


            html += "</tr>";
            html += "</tbody>";
            html += '</table>';
            return html;
          },
        },
        ...(goal !== null && {
          grid: {
            lines: { front: false },
            y: { lines: [{ value: goal }] } }
        }),
        bindto: '.#{class_name}'
      };
      if(max_100) {
        options.axis.y.padding = { top: 0, bottom: 0}
      }
      const chart = bb.generate(options);
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-width', 2)
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-dasharray', 2)
    });
