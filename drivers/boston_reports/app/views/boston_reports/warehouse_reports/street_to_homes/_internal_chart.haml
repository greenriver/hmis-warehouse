.internal-chart-wrapper{ class: ["internal-#{active_demographic}-by-#{active_group}-wrapper", hidden_class, "demographic-#{active_demographic}", "group-#{active_group}"] }
  .d-flex
    %h2.mb-4= title
    .action-buttons.ml-auto.d-flex
      .dropdown.internal-demographic-dropdown.mr-4
        %button.btn.btn-secondary.btn-sm.dropdown-toggle{ type: :button, data: { toggle: :dropdown}, aria: { expanded: :false }} Demographic
        .dropdown-menu
          - [:race, :ethnicity].each do |item|
            - classes = []
            - classes << 'active' if active_demographic == item || active_group == item
            %a.dropdown-item{ href: '#', class: classes, data: { value: item} }= item.to_s.humanize
      .dropdown.mr-4.internal-group-dropdown
        %button.btn.btn-secondary.btn-sm.dropdown-toggle{ type: :button, data: { toggle: :dropdown}, aria: { expanded: :false }} Group
        .dropdown-menu
          - [:stages, :cohorts].each do |item|
          - classes = []
            - classes << 'active' if active_group == item || active_demographic == item
            %a.dropdown-item{ href: '#', class: classes, data: { value: item} }= item.to_s.humanize
      %button.btn.btn-secondary.btn-sm.internal-axis-swap.mb-4 Swap Axes
  .row
    .col-sm-12
      .well{ data: { demographic: active_demographic, group: active_group } }
        .d-flex
          .chart.d-flex{style: 'width: 90%;'}
            %div{ id: "internal-#{active_demographic}-by-#{active_group}-chart", style: 'width: 80%; max-width: 80%;' }
            %div{ id: "internal-#{active_demographic}-by-#{active_group}-legend", style: 'width: 20%;' }

= content_for :page_js do
  :javascript
    let internal_#{active_demographic}_by_#{active_group} = #{@report.public_send(data_method).to_json.html_safe};
    internal_#{active_demographic}_by_#{active_group} = $.extend(true, {}, internal_#{active_demographic}_by_#{active_group}, {
      onclick: function(d, element) {
        // Don't allow drill-down on the unsheltered population
        if (this.categories()[d.x] == 'Unsheltered Population') {
          return false;
        }
        let sets = new URLSearchParams();
        let demographic = internal_#{active_demographic}_by_#{active_group}.columns[0][d.x + 1];
        sets.append('sets[]', demographic);
        sets.append('sets[]', d.name);
        let url = new URL(`${detail_path}?${detail_params.toString()}&${sets.toString()}`);

        return window.open(url.toString());
      },
      labels:  {
        centered: true,
        format: function(v, id, i, j) {
          if (v == 0) {
            return '';
          }
          let data = d3.map(internal_#{active_demographic}_by_#{active_group}.columns, (r) => r);
          let columns = d3.map(data, (row) => row)
          let numbers = d3.map(columns, (row) => Number.isInteger(row[i + 1]) ? row[i + 1] : 0);
          let total = numbers.reduce((partialSum, a) => partialSum + a, 0);
          let percentage = v/total;
          if (percentage < 0.05) {
            return '';
          }
          return d3.format('.0%')(percentage);
        }
      }
    });
    window.charts = window.charts || {}
    window.charts.internal_#{active_demographic}_by_#{active_group}_chart = bb.generate({
      'data': internal_#{active_demographic}_by_#{active_group},
      'bindto': "#internal-#{active_demographic}-by-#{active_group}-chart",
      bar: {
        padding: 20,
      },
      size: {
        height: 500,
      },
      axis: {
        x: {
          type: 'category',
        },
        y: {
          tick: {
            values: [0, 100],
          }
        },
      },

      legend: {
        contents: {
          bindto: '#internal-#{active_demographic}-by-#{active_group}-legend',
          template: "<div class='d-flex mr-auto text-left'><div class='mr-2 mt-2 mb-0 ml-0' style='padding:5px; height: 14px; width: 26px; background-color:{=COLOR}; border-radius: 10px; '>&nbsp;</div><div class='ml-0 mr-auto mt-1 mb-1'>{=TITLE}</div></div>"
        }
      }
    });
