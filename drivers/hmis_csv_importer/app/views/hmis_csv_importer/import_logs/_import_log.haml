= render partial: 'breadcrumbs'
- status = @import.import_time(details: true)
- ds_name = @import.data_source.name

%h1
  = Translation.translate("Import Log from #{ds_name}")
- if @import.importer_log&.paused?
  .alert.alert-warning
    %i.icon-warning.mr-2
    %p #{ds_name} is currently set to prevent imports from loading if they contain any errors.  This import contained at least one error, which you can review below.  If the errors are unacceptable, fix them in the HMIS CSV files and re-upload.
.row
  .col
    .card.mb-4
      %table.table.table-striped
        %tbody
          %tr
            %th Imported On
            %td= @import.created_at
          %tr
            %th Loaded
            %td= @import&.loader_log&.load_time
          - import_time = @import&.importer_log&.import_time
          - if import_time
            %tr
              %th Imported
              %td= import_time
          %tr
            %th Completed In
            %td
              = status
              - if @import.importer_log&.paused?
                = link_to hmis_csv_importer_importer_restart_path(@import), class: 'ml-4 btn btn-primary btn-sm', method: :put do
                  %i.icon-enter
                  Resume Import
          %tr
            %th Files Found
            %td
              = "#{@import.files.try(:count)} in #{@import.upload.hmis_zip.filename}" if @import&.upload&.hmis_zip.present?
              .mt-4
                - if @import&.upload&.hmis_zip.present?
                  = link_to download_import_path(@import), class: 'btn btn-sm btn-secondary' do
                    %i.icon-download2
                    Download Original
                - if @import.importer_log&.any_errors_or_validations?
                  = link_to hmis_csv_importer_importer_errors_path(@import.importer_log, format: :xlsx), class: 'btn btn-sm btn-secondary ml-4' do
                    %i.icon-download2
                    Download Error Report

  .col
    .card.mb-4
      %table.table.table-striped
        %tbody
          %tr
            %th Loader Log ID
            %td= @import&.loader_log_id
          %tr
            %th Upload ID
            %td= @import&.upload_id
          %tr
            %th Import Log ID
            %td= @import.id
          %tr
            %th Importer Log ID
            %td= @import&.importer_log_id

- if @import.loader_log.present?
  %h3 Loader Summary
  .card.mb-4
    %table.table.table-striped.import__summary.mb-0
      %thead
        %tr
          %th File
          %th Total Rows
          %th Rows Loaded
          %th Errors
      %tbody
        - @import.loader_log.summary.with_indifferent_access.sort_by{|f,_| f}.each do |filename,v|
          %tr
            %td= filename
            %td= number_with_delimiter(v['total_lines'])
            %td= link_to_if v['lines_loaded']&.positive?, number_with_delimiter(v['lines_loaded']), hmis_csv_importer_loaded_path(@import.loader_log, file: filename)
            %td= link_to_if v['total_errors']&.positive?, number_with_delimiter(v['total_errors']), hmis_csv_importer_loader_error_path(@import.loader_log, file: filename)

- if @import.importer_log.present?
  %h3 Importer Summary
  .card
    %table.table.table-striped.import__summary.mb-0
      %thead
        %tr
          %th File
          %th Rows Processed
          %th Rows Added
          %th Rows Removed
          %th Rows Updated
          %th Rows Unchanged
          %th Validation Flags
          %th Error Flags
          %th Errors
      %tbody
        - @import.importer_log.summary.with_indifferent_access.sort_by{|f,_| f}.each do |filename,v|
          %tr
            %td= filename
            %td= link_to_if v['pre_processed']&.positive?, number_with_delimiter(v['pre_processed']), hmis_csv_importer_imported_path(@import.importer_log, file: filename)
            %td= number_with_delimiter(v['added'])
            %td= number_with_delimiter(v['removed'])
            %td= number_with_delimiter(v['updated'])
            %td= number_with_delimiter(v['unchanged'])
            %td
              - if v['total_flags']&.zero?
                0
              - else
                - validations = @import.importer_log.import_validations_count(filename, @import.files)
                = link_to_if validations.positive?, number_with_delimiter(validations), hmis_csv_importer_importer_validation_path(@import.importer_log, file: File.basename(filename, '.csv'))
            %td
              - if v['total_flags']&.zero?
                0
              - else
                - errors = @import.importer_log.import_validation_errors_count(filename, @import.files)
                = link_to_if errors.positive?, number_with_delimiter(errors), hmis_csv_importer_importer_validation_error_path(@import.importer_log, file: File.basename(filename, '.csv'))

            %td= link_to_if v['total_errors']&.positive?, number_with_delimiter(v['total_errors']), hmis_csv_importer_importer_error_path(@import.importer_log, file: File.basename(filename, '.csv'))

- if @import.import_errors.present? && @import.import_errors.is_a?(Array)
  .row
    .col-sm-12
      %h3 Import Errors
      - @import.import_errors.each do |e|
        = render 'error_list', error: e
