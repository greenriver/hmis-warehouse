= content_for :crumbs do
  = link_to hud_reports_legacy_spm_path(@report) do
    = "Â« " + Translation.translate("Report result for #{@report.name}")

%h1= Translation.translate("Report result for #{@report.name}")
.row
  .col-sm-8
    %dl
      - if @report.has_project_option?
        - p_id, ds_id = JSON.parse(@result.options['project'])
        - project = GrdaWarehouse::Hud::Project.joins(:data_source).where(ProjectID: p_id, data_source_id: ds_id).first
        %dt Limited to Project:
        %dd
          = link_to project.name(ignore_confidential_status: true), project_path(project)
      - if @report.has_data_source_option?
        - ds_id = @result.options['data_source'].to_i
        - ds = GrdaWarehouse::DataSource.find(ds_id)
        %dt Limited to Data Source:
        %dd= link_to ds.name, data_source_path(ds)
      - if @report.has_date_range_options?
        %dt Report Start:
        %dd= @result.options['report_start'].to_date
        %dt Report End:
        %dd= @result.options['report_end'].to_date
      - if @report.has_options?
        %dt= @report.title_for_options
        %dd= @report.value_for_options @result.options
      %dt Started:
      %dd= @result.created_at
      %dt Runtime:
      %dd= @result.completed_in
      %dt Progress
      %dl= @result.last_run_status
  .col-sm-4.text-right
    - if @result.results.present? && @result.download_type.present? && @result.download_type != :zip
      = link_to({format: @result.download_type},{class: 'btn btn-primary'}) do
        %span.icon-download2
        Download
        = @result.download_type.upcase
    - if @result.download_type.present? && @result.download_type == :zip
      = link_to({ format: @result.download_type }, {class: 'btn btn-primary'}) do
        %span.icon-download2
        Download
    - if @result.support_file_id
      .mt-2
        = link_to({ action: :download_support, format: :zip}, {class: 'btn btn-secondary'}) do
          %span.icon-download2
          Supporting Files
    - if @result.export_id
      .mt-2
        = link_to(warehouse_reports_hmis_export_path(@result.export_id), {class: 'btn btn-secondary'}) do
          %span.icon-download2
          Source HMIS Data
- if @result.job_status.present?
  .alert.alert-danger
    .error-note
      %p.mb-6 The report failed to run with an unexpected error.  A notification has been sent to #{Translation.translate('Green River')}.  If this is time-critical, you may want to #{Translation.translate('contact us')} directly.  The details of the error are listed here:
      = @result.job_status
- if @result.validations.present?
  - error_count = @result.validations.map{|section, errs| errs.size}.sum
  - if error_count > 0
    .row
      .col-sm-12
        %h2 Validation Errors
        - @result.validations.each do |section, errs|
          %h3= section
          %ul
            - errs.each do |group, notes|
              %li= notes
- if @result.results.present?
  %dt Results
  %dl{class: 'report-result--results'}
    .table-responsive
      %table.table.table-sm.table-hover
        - @result.results.each do |key, result|
          - if result['title'].present?
            - have_support = @result.support.present? && @result.support[key].present? && @result.support[key]['support'].present?
            %tr
              %th= result['title']
              %td
                - if have_support
                  = link_to report_report_result_support_index_path(@report, @result, {key: key}), data: {loads_in_pjax_modal: true} do
                    = result['value']
                - else
                  = result['value']
              %td
                - if have_support
                  = link_to report_report_result_support_index_path(@report, @result, {key: key, format: :xlsx}) do
                    %span.icon-download2
