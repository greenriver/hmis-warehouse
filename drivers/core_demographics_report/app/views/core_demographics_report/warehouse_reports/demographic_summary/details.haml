- title = "Support for #{@report.support_title(@key)}"
= content_for :modal_title, title
= render 'warehouse_reports/beta_warning'
%p.mr-auto= @filter.date_range_words
.d-flex.mb-4
  .mr-4
    .input-group
      %input#table_search.form-control{autofocus: true, type: :text, placeholder: 'Search...'}
      %span.input-group-append
        %button.btn.btn-secondary Search
  .ml-auto
    = link_to({format: :xlsx}.merge(link_params),{class: 'btn btn-secondary'}) do
      %i.icon.icon-download2
      Download Excel

- scope = @report.detail_scope_from_key(@key)
- unless scope.exists?
  .none-found No records found.
- else
  #detailRollup
    - @report.class.detail_section_types.each do |section|
      = render 'background_render', url: render_detail_section_core_demographics_report_warehouse_reports_demographic_summary_index_path, fetch_params: { filters: @filter.for_params[:filters], key: params[:key] } do
        .rollup
          .rollup-container.well

  = content_for :page_js do
    :javascript
      let observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          console.log(mutation)
          if (mutation.addedNodes && mutation.addedNodes.length > 0) {
            let hasClass = [].some.call(mutation.addedNodes, (el) => {
              if(!el.classList)
                return

              return $(el).find('.datatable').length > 0
            });
            if (hasClass) {
              let table = $('.datatable').DataTable({
                paging: false,
                "dom": 'lrtip'
              });
              $('#table_search').keyup(function(){
                table.search($(this).val()).draw();
              });
            }
          }
        });
      });

      let config = {
          attributes: false,
          childList: true,
          characterData: false
      };

      observer.observe(document.getElementById('detailRollup'), config);
