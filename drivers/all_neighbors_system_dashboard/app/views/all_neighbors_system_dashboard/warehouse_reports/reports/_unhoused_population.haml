- if params[:fake].present? && Rails.env.development?
  - start_date = (DateTime.current - 3.years).beginning_of_month
  - end_date = DateTime.current.beginning_of_month
  - all_data = AllNeighborsSystemDashboard::FakeUnhousedPopulation.new(start_date, end_date)
- else
  - start_date = @report.filter.start_date.beginning_of_month
  - end_date = @report.filter.end_date.beginning_of_month
  - all_data = AllNeighborsSystemDashboard::UnhousedPopulation.new(@report)

- donut_ids = all_data.donut_data.map{|d| chart_id(tab[:id], d[:id])}
- donut_filter_label_ids = all_data.donut_data.map { |d| filter_label_id(tab[:id], d[:id]) }

%h2.mb-4{class: css_namespace('all', 'tab_name')} People Experiencing Homelessness
.border.my-7.p-6
  %h3.mb-6 Homeless Population Over Time
  %div{id: chart_id(tab[:id], 'vertical_stack')}
  .d-flex.justify-content-center{id: legend_id(tab[:id], 'vertical_stack')}

.border.my-7.p-4
  .row.align-items-center.justify-content-between
    .col-xs-12.col-md-4
      = render 'select_filter', tab: tab, name: 'homelessness_status', label: 'Homelessness Status', options: all_data.homelessness_statuses
    .col-xs-12.col-md-4
      = render 'year_filter', tab: tab, name: 'year', label: 'Choose Time Period', label_hint: 'Selection affects charts below', date: end_date, start_date: start_date, end_date: end_date

%h3
  Sheltered & Unsheltered
  %br
  %span{class: filter_label_id(tab[:id], 'year')}

= render 'donuts', tab: tab, donut_data: all_data.donut_data, filter_label: 'year'

= render 'stacked_charts', data: [all_data.stacked_data], group: 'Racial Composition', filter_label: 'year', filter: false, filter_data: [], show_chart_titles: false, hint: false, tab: tab, legend_padding: '200px'


- content_for :page_js do
  :javascript
    $(document).ready(function() {
      console.log('Unhoused Population -----------------')
      var verticalStackData = #{all_data.vertical_stack.to_json.html_safe}
      
      var donutData = #{all_data.donut_data.to_json.html_safe}
      var stackedData = #{all_data.stacked_data.to_json.html_safe}
      var stackedId = '##{chart_id(tab[:id], "stacked_#{all_data.stacked_data[:id]}")}'
      var donutIds = #{donut_ids.to_json.html_safe}
      var donutFilterLabelIds = #{donut_filter_label_ids.to_json.html_safe}

      var charts = [
        {
          chart: AllNeighborsSystemDashboardStack,
          data: stackedData,
          selector: stackedId,
          options: {
            legend: {selector: stackedId+'_legend'},
          }
        }
      ].concat(donutData.map(function(d, i) {
        return {
          chart: AllNeighborsSystemDashboardDonut,
          data: d,
          selector: '#'+donutIds[i],
          options: {
            countLevelLabelSelector: '#'+donutFilterLabelIds[i],
            legend: {
              selector: '#'+donutIds[i]+'_legend'
            }
          }
        }
      }))

      var filterConfig = [
        {
          name: 'homelessnessStatus',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'homelessness_status')}'
        },
        {
          name: 'year',
          type: 'year',
          selector: '##{filter_id(tab[:id], 'year')}'
        },
      ]

      var labelConfig = [
        {
          name: 'year',
          selector: '.#{filter_label_id(tab[:id], 'year')}'
        },
      ]

      var filters = new AllNeighborsSystemDashboardFilters(filterConfig, charts, labelConfig)
      filters.test()

      // this chart doesn't use filters but still wrapping to get resize behavior from filters class
      var verticalStackFilter = new AllNeighborsSystemDashboardFilters(
          [],
          [
            {
              chart: AllNeighborsSystemDashboardUPVerticalStack,
              data: verticalStackData,
              selector: '##{chart_id(tab[:id], 'vertical_stack')}',
              options: {
                legend: {selector: '##{legend_id(tab[:id], 'vertical_stack')}'}
              }
            }
          ]
        )

    })
