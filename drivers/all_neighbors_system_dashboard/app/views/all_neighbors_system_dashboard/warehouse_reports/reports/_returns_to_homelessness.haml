- r_start_date = @filter.start_date.beginning_of_month
- r_end_date = @filter.end_date.beginning_of_month
- all_data = AllNeighborsSystemDashboard::ReturnsToHomelessness.new(r_start_date, r_end_date, @report)

- chart_data = all_data.stacked_data

%h2 Returns To Homelessness
.border.p-4
  .d-flex.justify-content-between
    %h3 Returns to Homelessness
    %small * after exiting to permanent destination
  #all-neighbors__returns-to-homelessness__overlap_bar
.my-7
  .row.justify-content-between
    .col-xs-12.col-md-9
      %h3 Racial Composition
    .col-xs-12.col-md-3
      .d-flex.justify-content-end
        = render 'select_filter', tab: tab, name: 'demographics', label: 'Demographics', options: all_data.demographics

- chart_data.each_with_index do |d, i|
  .d-flex.justify-content-between
    %h4= d[:title]
    - if i == 0
      %small * Exited to permanent destinations
  %div{id: "all-neighbors__returns-to-homelessness__stacked_#{d[:id]}", style: 'height:200px;width:100%;'}

- content_for :page_js do
  :javascript
    $(document).ready(function() {
      console.log('Returns To Homelessness -----------------')
      var data = #{chart_data.to_json.html_safe}
      var barData = #{all_data.bars.to_json.html_safe}

      var bar = new AllNeighborsSystemDashboarBar(
        barData,
        {},
        '#all-neighbors__returns-to-homelessness__overlap_bar',
        {}
      )
      bar.draw()

      var charts = data.map(function(d) {
        return {
          chart: AllNeighborsSystemDashboardStack, 
          data: d,
          selector: '#all-neighbors__returns-to-homelessness__stacked_'+d.id,
          options: {normalize: true, rotated: true}
        }
      })

      var filterConfig = [
        {
          name: 'demographics',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'demographics')}'
        },
      ]

      var filters = new AllNeighborsSystemDashboardFilters(filterConfig, charts)
      filters.test()
    })