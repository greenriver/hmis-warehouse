- if params[:fake].present? && Rails.env.development?
  - start_date = (DateTime.current - 3.years).beginning_of_month
  - end_date = DateTime.current.beginning_of_month
  - all_data = AllNeighborsSystemDashboard::FakeReturnsToHomelessness.new(start_date, end_date)
- else
  - all_data = AllNeighborsSystemDashboard::ReturnsToHomelessness.new(@report)
  - start_date = @report.filter.start_date
  - end_date = @report.filter.end_date
- retuns_data = all_data.retuns_data
- retuns_ids = retuns_data.map { |d| chart_id(tab[:id], d[:id]) }
- retuns_filter_label_ids = retuns_data.map { |d| filter_label_id(tab[:id], d[:id]) }
- debug = params[:debug].present? || Rails.env.development?

%h2{class: css_namespace('all', 'tab_name')}= tab[:name]
.border.my-7.p-4
  %h4.mt-0 Select Universe
  .row.align-items-center
    .col-xs-12.col-md-8
      .d-flex
        .pr-6= render 'select_filter', tab: tab, name: 'project_type', label: 'Project Type', options: all_data.project_types_with_data
        .pr-6= render 'select_filter', tab: tab, name: 'count_level', label: 'Count Level', options: all_data.count_levels
        = render 'select_filter', tab: tab, name: 'demographics', label: 'Demographics', options: ['All'] + all_data.demographics

    .col-xs-12.col-md-4
      = render 'date_range_filter', tab: tab, name: 'date_range', label: 'Date Range', start_date: start_date.strftime("%b %Y"), end_date: end_date.strftime("%b %Y")
.mb-7= render 'filter_labels', tab: tab, labels: ['project_type', 'count_level', 'date_range']

- if debug
  .well
    = link_to 'Debug page ->', debug_all_neighbors_system_dashboard_warehouse_reports_report_path(@report, {project_type: 'All', count_level: 'Individuals', group: 'monthly_counts'})

= render 'donuts', tab: tab, donut_data: retuns_data, filter_label: 'date_range'

.mb-12.pb-12


- content_for :page_js do
  :javascript
    $(document).ready(function() {
      console.debug('Housing Placement -----------------')
      var retunsData = #{retuns_data.to_json.html_safe}
      var retunsIds = #{retuns_ids.to_json.html_safe}
      var retunsFilterLabelIds = #{retuns_filter_label_ids.to_json.html_safe}

      var charts = [].concat(retunsData.map(function(d, i) {
        return {
          chart: AllNeighborsSystemDashboardDonut,
          data: d,
          selector: '#'+retunsIds[i],
          options: {
            countLevelLabelSelector: '#'+retunsFilterLabelIds[i],
            legend: {
              selector: '#'+retunsIds[i]+'_legend'
            }
          }
        }
      }))

      var filterConfig = [
        {
          name: 'projectType',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'project_type')}'
        },
        {
          name: 'countLevel',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'count_level')}'
        },
        {
          name: 'dateRange',
          type: 'dateRange',
          selector: '##{filter_id(tab[:id], 'date_range')} input'
        }
      ]

      var labelConfig = [
        {
          name: 'projectType',
          selector: '.#{filter_label_id(tab[:id], 'project_type')}'
        },
        {
          name: 'countLevel',
          selector: '.#{filter_label_id(tab[:id], 'count_level')}'
        },
        {
          name: 'dateRange',
          selector: '.#{filter_label_id(tab[:id], 'date_range')}'
        },
      ]

      var filters = new AllNeighborsSystemDashboardFilters(filterConfig, charts, labelConfig)
      filters.test()


    })
