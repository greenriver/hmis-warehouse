- start_date = (DateTime.current - 3.years).beginning_of_month
- end_date = DateTime.current.beginning_of_month
- all_data = AllNeighborsSystemDashboard::FakeHousingTotalPlacementsData.new(start_date, end_date)
- total_data = all_data.line_data_by_quarter
- donut_data = all_data.donut_data
- donut_ids = donut_data.map { |d| chart_id(tab[:id], d[:id]) }
- donut_filter_label_ids = donut_data.map { |d| filter_label_id(tab[:id], d[:id]) }
- stacked_data = all_data.internal_stacked_data

%h2{class: css_namespace('all', 'tab_name')}= tab[:name]
.border.my-7.p-4
  %h4.mt-0 Select Universe
  .row.align-items-center
    .col-xs-12.col-md-8
      .d-flex
        .pr-6= render 'select_filter', tab: tab, name: 'project_type', label: 'Project Type', options: all_data.project_types
        = render 'select_filter', tab: tab, name: 'count_level', label: 'Count Level', options: all_data.count_levels
         
    .col-xs-12.col-md-4
      = render 'quarter_range_filter', tab: tab, name: 'quarter_range', label: 'Date Range', quarters: all_data.quarter_range
.mb-7
  %h5.mt-0 Time Period
  %div{id: chart_id(tab[:id], 'quarters')}
  
.mb-7= render 'filter_labels', tab: tab, labels: ['project_type', 'count_level', 'quarter_range']

.border.mb-7
  .py-6.px-5.border-bottom
    .row.align-items-center.mb-6 
      .col-sm-12.col-md-4
        %h3
          Placements per Quarter & Total Placements To Date
      .col-sm-12.col-md-8
        .d-flex.justify-content-end
          .pr-6= render 'select_filter', tab: tab, name: 'program_name', label: 'Project Name', options: all_data.program_names
          .pr-6= render 'select_filter', tab: tab, name: 'population', label: 'Population', options: all_data.populations
          = render 'select_filter', tab: tab, name: 'count_type', label: 'Count Type', options: all_data.count_types
    %div{id: chart_id(tab[:id], 'total_placements_internal'), style: 'height:400px;'}
    .w-100.mt-5.d-flex.justify-content-center.flex-nowrap
      .d-flex.justify-content-center.flex-row-reverse.flex-nowrap{id: "#{chart_id(tab[:id], 'total_placements_internal')}_legend"}
      %div
        (
        %span{class: filter_label_id(tab[:id], 'quarter_range')}
        )
  .p-4.border-top
    - table_id = table_id(tab[:id], 'internal_housing_placements')
    = link_to "javascript:void(0)", data: {toggle: 'collapse', target: "##{table_id}"}, role: 'button', aria: {expanded: 'false', controls: table_id}, class: "d-flex justify-content-between align-items-center w-100 #{css_namespace('internal', 'table_toggle')}" do
      %span Insights - Housing Placements
      %i.icon-angle-down
  .collapse{id: table_id}
    .p-4.border-top{id: filter_label_id(tab[:id], 'total_placement_insights')}

= render 'donuts', tab: tab, donut_data: donut_data, filter_label: 'date_range'

= render 'stacked_charts', data: [stacked_data], group: 'Racial Composition', filter_label: 'date_range', filter: false, filter_data: [], show_chart_titles: false, hint: false, tab: tab, legend_padding: '200px'


- content_for :page_js do
  :javascript
    $(document).ready(function() {
      console.log('Housing Placement -----------------')
      var quarterData = #{all_data.quarter_range.to_json.html_safe}
      var totalData = #{total_data.to_json.html_safe}
      var donutData = #{donut_data.to_json.html_safe}
      var donutIds = #{donut_ids.to_json.html_safe}
      var donutFilterLabelIds = #{donut_filter_label_ids.to_json.html_safe}
      var stackedData = #{stacked_data.to_json.html_safe}
      var stackedId = '##{chart_id(tab[:id], "stacked_#{stacked_data[:id]}")}'

      var charts = [
        {
          chart: AllNeighborsSystemDashboardQuarters,
          data: quarterData,
          selector: '##{chart_id(tab[:id], 'quarters')}',
          options: {}
        },
        {
          chart: AllNeighborsSystemDashboardStack,
          data: stackedData,
          selector: stackedId,
          options: {
            legend: {selector: stackedId+'_legend'},
          }
        }
      ].concat(donutData.map(function(d, i) {
        return {
          chart: AllNeighborsSystemDashboardDonut,
          data: d,
          selector: '#'+donutIds[i],
          options: {
            countLevelLabelSelector: '#'+donutFilterLabelIds[i],
            legend: {
              selector: '#'+donutIds[i]+'_legend'
            }
          }
        }
      }))

      var filterConfig = [
        {
          name: 'projectType',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'project_type')}'
        },
        {
          name: 'countLevel',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'count_level')}'
        },
        {
          name: 'quarterRange',
          type: 'quarterRange',
          selector: '##{filter_id(tab[:id], 'quarter_range')} select',
          data: quarterData
        }
      ]

      var labelConfig = [
        {
          name: 'projectType',
          selector: '.#{filter_label_id(tab[:id], 'project_type')}'
        },
        {
          name: 'countLevel',
          selector: '.#{filter_label_id(tab[:id], 'count_level')}'
        },
      ]

      var filters = new AllNeighborsSystemDashboardFilters(filterConfig, charts, labelConfig)
      filters.test()

      var lineCharts = [
        {
          chart: AllNeighborsSystemDashboardLineBarByQuarter,
          data: totalData,
          selector: '##{chart_id(tab[:id], 'total_placements_internal')}',
          options: {
            legend: {selector: '##{chart_id(tab[:id], 'total_placements_internal')}_legend'},
            insights: {selector: '##{filter_label_id(tab[:id], 'total_placement_insights')}'}
          }
        },
      ]

      var lineFilterConfig = [
        {
          name: 'projectType',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'project_type')}'
        },
        {
          name: 'countLevel',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'count_level')}'
        },
        {
          name: 'quarterRange',
          type: 'quarterRange',
          selector: '##{filter_id(tab[:id], 'quarter_range')} select',
          data: quarterData
        },
        {
          name: 'programName',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'program_name')}',
        },
        {
          name: 'population',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'population')}',
        },
        {
          name: 'countType',
          type: 'select',
          selector: '##{filter_id(tab[:id], 'count_type')}',
        }
      ]

      var lineLabelConfig = [
        {
          name: 'quarterRange',
          selector: '.#{filter_label_id(tab[:id], 'quarter_range')}'
        },
      ]

      var lineFilters = new AllNeighborsSystemDashboardFilters(lineFilterConfig, lineCharts, lineLabelConfig)
      lineFilters.test()
      

    })