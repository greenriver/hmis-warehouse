:ruby
  date_id = next_html_id
  month_id = next_html_id
  day_id = next_html_id
  year_id = next_html_id
  validation_message_id = next_html_id
.form-text.text-muted.mb-2
  For example: 3 27 2007
%div.hide.text-danger.my-2{id: validation_message_id}
.form-row
  %input{type:"hidden", name: name, id: date_id}
  .col-3
    = render_numeric_input(label: 'Month', name: nil, required: required, input_placeholder: 'MM', input_html_id: month_id, input_pattern: '0?[1-9]|1[0-2]', input_invalid_feedback: 'must be a month (1-12)')
  .col-3
    = render_numeric_input(label: 'Day', name: nil, required: required, input_placeholder: 'DD', input_html_id: day_id, input_pattern: '0?[1-9]|1[0-9]|2[0-9]|3[01]', input_invalid_feedback: 'must be a day of the month (1-31)')
  .col-4
    = render_numeric_input(label: 'Year', name: nil, required: required, input_placeholder: 'YYYY', input_html_id: year_id, input_pattern: '(19|20)\d{2}', input_invalid_feedback: 'must be a four-digit year')

- content_for :page_js do
  :javascript
    'use strict';
    $(function() {
      var month ='#' + #{month_id.to_json.html_safe};
      var day ='#' + #{day_id.to_json.html_safe};
      var year ='#' + #{year_id.to_json.html_safe};
      var date ='#' + #{date_id.to_json.html_safe};
      var validationMessage ='#' + #{validation_message_id.to_json.html_safe};

      $([month, day, year].join(', ')).on('change', function() {
        var parts = [
          $(month).val().padStart(2, '0'),
          $(day).val().padStart(2, '0'),
          $(year).val()
        ]
        // console.info(parts.join('/'));
        $(date).val(parts.join('/'));
      });

      var dateValidationMessage = function(month, day, year) {
        if (!(month && day && year)) return

        month = parseInt(month) - 1;
        day = parseInt(day);
        year = parseInt(year);
        var inputDate = new Date(year, month, day);

        // Check if date is valid by comparing it against the parts
        if (inputDate.getFullYear() !== year || inputDate.getMonth() !== month || inputDate.getDate() !== day) {
          return "Date is not valid";
        }

        // FIXME - it would be nice to pass in bounds from the date (max: $today, etc)
        // var today = new Date();
        // var dateMax = new Date(today.getFullYear() - 10, 0, 1);
        // var dateMin = new Date(today.getFullYear() - 100, 0, 1);

        // if (inputDate < dateMin) {
        //   return "Date must greater than " + dateMin.toDateString();
        // } else {
        //   if (inputDate > dateMax) return "Date must less than " + dateMax.toDateString();
        // }
      }

      var setError = function(msg) {
        // console.info(msg)
        var el = $(validationMessage);
        if (msg) {
          el.addClass('is-invalid');
          el.removeClass('hide');
          el.text(msg);
        } else {
          el.removeClass('is-invalid');
          el.addClass('hide');
          el.text('');
        }
      }

      $([month, day, year].join(',')).on('focusout', function () {
        var monthValue = $(month).val();
        var dayValue = $(day).val();
        var yearValue = $(year).val();
        setError(dateValidationMessage(monthValue, dayValue, yearValue));
      });
    });
