- markdown = Redcarpet::Markdown.new(::InlineHtml)
- chart_class_name = "jChart_#{@result.chart_slug}"
- indicator = @result.indicator(@comparison)
= content_for :crumbs do
  = link_to ce_performance_warehouse_reports_report_path(@report) do
    &laquo; #{@report.title}

.ce-performance
  %label.super-rounded.p-4.pl-6.pr-6{ class: "performance-measurement--highlight-#{@report.highlight_id(@category_name)}" }
    = @category_name

  %h1.ml-2= @result.class.title
  .warehouse-reports__completed.mt-2.d-flex
    = @report.filter.describe_filter_as_html([:start, :end, :comparison_pattern], inline: true)
  .d-flex.mb-4.border-top.pt-4
    - if @result.display_goal?
      .goal.col-4
        %h3 Goal
        %p= raw markdown.render(@result.description)
    .calculation.ml-6.mr-6
      %h3 Calculation
      %p= raw markdown.render(@result.class.calculation)

    - if @result.class.ce_apr_question.present?
      .col-2.ml-auto.p-0
        = render 'hud_report_links', title: "CE APR #{@result.class.ce_apr_question}"

.row
  .col-6
    - status = @result.passed?(@comparison) ? 'success' : 'danger'
    - icon = @result.passed?(@comparison) ? 'check' : 'cross'
    - label = @result.passed?(@comparison) ? 'Passed' : 'Failed'
    .row
      - if @result.display_goal?
        .col-sm-4
          = tagged(@result.passed?(@comparison), status, icon: icon, label: label)
      - else
        .col-sm-2
      .col-sm-4
        .performance-measurement__result-number.font-weight-bold=number_with_delimiter(indicator.secondary_value)
        .text-capitalize="#{indicator.secondary_unit} #{sanitize(indicator.value_label)}"
      .col-sm-4
        .performance-measurement__result-number.font-weight-bold=number_with_delimiter(indicator.primary_value)
        .text-capitalize=indicator.primary_unit
  .col-6.ce-performance
    .c-chart--vertical-bar{ class: chart_class_name, data: { chart: @result.data_for_chart(@report, @comparison).to_json }}
= render 'vispdat_breakdown_table'
= render 'event_breakdown_table'
= render 'sub_population_table'

= content_for :page_js do
  :javascript
    $(document).ready(function() {
      const data = $('.#{chart_class_name}').data('chart');
      let max = data.columns[0].slice(1);
      if(data.columns.length == 2) {
        max = Math.max(...data.columns[1].slice(1));
      }
      const includePercent = #{@result.percentage?};
      const max_100 = #{@result.max_100?};
      const goal = #{@result.goal_line.to_json};
      let axisMax = max < goal && goal !== null ? goal : undefined;
      if(max_100) {
        axisMax = 100;
      }
      const tooltipTitles = #{@result.titles_for_bar_tooltip(@report).to_json.html_safe}

      data.labels.format = function (v, id, i, texts) {
        if (v < (axisMax || max) * 0.15) {
          return '';
        }
        if (includePercent) {
          return d3.format(".0%")(v / 100);
        } else {
          return d3.format(",d")(v);
        }
      }
      options = {
        data: data,
        axis: {
          rotated: includePercent,
          x: { type: 'category' },
          y: {
            tick: {
              stepSize: 1,
              count: 3,
              format: function(x) { return `${d3.format('d')(x)}${includePercent ? '%' : ''}`}
            },
            ...(axisMax && { max: axisMax }),
          },
        },
        size: { height: 150 },
        legend: { show: false },
        tooltip: {
          contents: (d, defaultTitleFormat, defaultValueFormat, color) => {
            const data = d[0];

            // Build ratio description
            let description = '';
            if (#{@result.percentage?}) {
              const numer = data.index === 0 ? "#{@result.numerator}" : "#{@comparison&.numerator}";
              const denom = data.index === 0 ? "#{@result.denominator}" : "#{@comparison&.denominator}";
              description = ` (${numer} of ${denom})`;
            }

            let html = "<table class='bb-tooltip' style='opacity: 1;'>";
            html += "<thead>";
            html += `<tr><th colspan="3">${tooltipTitles[data.index]}</th></tr>`
            if (goal) html += `<tr><th></th><th>Value</th><th>Goal</th></tr>`;
            html += "</thead>";
            html += "<tbody>";

            const bg_color = color(data.id);
            const box = `<td style='white-space: nowrap;'><svg><rect style='fill:${bg_color}' width='10' height='10'></rect></svg>${data.name}</td>`;
            const value = `<td style='white-space: nowrap;'>${defaultValueFormat(data.value)}${description}</td>`;
            html += box;
            html += value;
            if (goal)
              html += `<td style='white-space: nowrap;'>${defaultValueFormat(goal)}</td>`;
            html += "</tr>";
            html += "</tbody>";
            html += '</table>';
            return html;
          },
        },
        ...(goal !== null && {
          grid: {
            lines: { front: false },
            y: { lines: [{ value: goal }] } }
        }),
        bindto: '.#{chart_class_name}'
      };
      if(max_100) {
        options.axis.y.padding = { top: 0, bottom: 0}
      }
      const chart = bb.generate(options);
      d3.select('.#{chart_class_name} .bb-ygrid-line line').style('stroke-width', 2)
      d3.select('.#{chart_class_name} .bb-ygrid-line line').style('stroke-dasharray', 2)
    });
